<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>天雪论坛自动回复水楼赚金币油猴脚本（会被封号，仅研究用）</title>
    <link href="/2021/12/21/2021-12-21-skyeysnow-auto-reply/"/>
    <url>/2021/12/21/2021-12-21-skyeysnow-auto-reply/</url>
    
    <content type="html"><![CDATA[<p>&amp;emsp;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> ==<span class="hljs-title class_">UserScript</span>==<br> @name        skyeysnow auto reply<br> @namespace   <span class="hljs-title class_">Violentmonkey</span> <span class="hljs-title class_">Scripts</span><br> @match       httpsskyeysnow.<span class="hljs-property">comforum</span>.<span class="hljs-property">phpmod</span>=viewthread&amp;tid=<span class="hljs-number">32319</span><br> @grant       none<br> @version     <span class="hljs-number">1.0</span><br> @author      <span class="hljs-title class_">Roach</span> <span class="hljs-title class_">Lin</span><br> @description 天雪论坛自动回复水楼赚金币<br> ==<span class="hljs-title class_">UserScript</span>==<br><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-string">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-built_in">setTimeout</span>(()=&#123;<br><br><span class="hljs-keyword">var</span> poem=<br>  [<br>  山有木兮木有枝，心悦君兮君不知。,<br>  人生若只如初见，何事秋风悲画扇。,<br>  十年生死两茫茫，不思量，自难忘。,<br>  曾经沧海难为水，除却巫山不是云。,<br>  玲珑骰子安红豆，入骨相思知不知。,<br> 只愿君心似我心，定不负相思意。,<br>平生不会相思，才会相思，便害相思。,<br>  愿得一心人，白头不相离。,<br>  山无陵，江水为竭。冬雷震震，夏雨雪。天地合，乃敢与君绝。,<br>  入我相思门，知我相思苦。<br>  ]<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;fastpostmessage&#x27;</span>).<span class="hljs-property">value</span>=poem[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()<span class="hljs-number">10</span>)];<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;fastpostrefresh&#x27;</span>).<span class="hljs-property">checked</span>=<span class="hljs-literal">false</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;fastpostsubmit&#x27;</span>).<span class="hljs-title function_">click</span>();<br><br>        location.<span class="hljs-title function_">reload</span>();<br><br>&#125;,<span class="hljs-number">1800000</span>);<br><br>&#125;)();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL 自学笔记</title>
    <link href="/2021/12/11/2021-12-11-self-learn-sql/"/>
    <url>/2021/12/11/2021-12-11-self-learn-sql/</url>
    
    <content type="html"><![CDATA[<p>&amp;emsp;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> gbk;<br><br><span class="hljs-comment">-- 如果test数据库不存在，就创建test数据库：</span><br><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> test;<br><br><span class="hljs-comment">-- 切换到test数据库</span><br>USE test;<br><br><span class="hljs-comment">-- 删除classes表和students表（如果存在）：</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> classes;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> students;<br><br><span class="hljs-comment">-- 创建classes表：</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> classes (<br>    id <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- 创建students表：</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> students (<br>    id <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    class_id <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    gender <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    score <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- 插入classes记录：</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> classes(id, name) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;一班&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> classes(id, name) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;二班&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> classes(id, name) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;三班&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> classes(id, name) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;四班&#x27;</span>);<br><br><span class="hljs-comment">-- 插入students记录：</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (id, class_id, name, gender, score) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">90</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (id, class_id, name, gender, score) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">95</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (id, class_id, name, gender, score) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;小军&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">88</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (id, class_id, name, gender, score) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">73</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (id, class_id, name, gender, score) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">81</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (id, class_id, name, gender, score) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;小兵&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">55</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (id, class_id, name, gender, score) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;小林&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">85</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (id, class_id, name, gender, score) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;小新&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">91</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (id, class_id, name, gender, score) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;小王&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">89</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (id, class_id, name, gender, score) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">10</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;小丽&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">85</span>);<br><br><span class="hljs-comment">-- OK:</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;ok&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;result:&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="GUID（全局唯一标识符）"><a href="#GUID（全局唯一标识符）" class="headerlink" title="GUID（全局唯一标识符）"></a>GUID（全局唯一标识符）</h1><p>全局唯一标识符（GUID，Globally Unique Identifier）是一种由算法生成的二进制长度为128位的数字标识符。GUID主要用于在拥有多个节点、多台计算机的网络或系统中。在理想情况下，任何计算机和计算机集群都不会生成两个相同的GUID。GUID的总数达到了2^128（3.4×10^38）个，所以随机生成两个相同GUID的可能性非常小，但并不为0。所以，用于生成GUID的算法通常都加入了非随机的参数（如时间），以保证这种重复的情况不会发生。</p><p>GUID的格式为“xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx”，其中每个 x 是 0-9 或 a-f 范围内的一个十六进制数。例如：6F9619FF-8B86-D011-B42D-00C04FC964FF 即为有效的 GUID 值。</p><ul><li>需要GUID的时候，可以完全由算法自动生成，不需要一个权威机构来管理。</li><li>GUID理论上能产生全宇宙唯一的值，对于以后的数据导入很方便。</li></ul><h1 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h1><p>主键的选取非常重要：主键不要带有业务含义，而应该使用BIGINT自增或者GUID类型。</p><h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><p>基本步骤：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">cd 到 SQL 文件目录<br>mysql -u root -p<br>输入密码<br>\. 加文件名（中间有空格）<br>show databases<span class="hljs-comment">;</span><br>use 加数据库名<span class="hljs-comment">;</span><br>开始输入语句<br></code></pre></td></tr></table></figure><p>如果出现乱码，Windows 系统下 SQL 文件格式保存为 ANSI，在文件开头加上 <code>set character set gbk;</code></p><p><code>SELECT * FROM students;</code></p><p><code>SELECT * FROM &lt;表名&gt;</code></p><p>SELECT 是关键字，表示将要执行一个查询，* 表示“所有列”，FROM表示将要从哪个表查询。</p><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>SELECT 语句可以通过 WHERE 条件来设定查询条件。</p><p><code>SELECT * FROM students WHERE score &gt;= 80</code></p><p><code>SELECT * FROM &lt;表名&gt; WHERE &lt;条件表达式&gt;</code></p><p>条件表达式如下：</p><h3 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h3><p><code>SELECT * FROM students WHERE score &gt;= 80 AND gender = &#39;M&#39;;</code></p><h3 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h3><p><code>SELECT * FROM students WHERE score &gt;= 80 OR gender = &#39;M&#39;;</code></p><h3 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a>NOT</h3><p><code>SELECT * FROM students WHERE NOT class_id = 2;</code></p><p>上述 NOT class_id &#x3D; 2 其实等价于 class_id &lt;&gt; 2，因此，NOT 查询不是很常用。</p><h3 id="组合多个条件"><a href="#组合多个条件" class="headerlink" title="组合多个条件"></a>组合多个条件</h3><p><code>SELECT * FROM students WHERE (score &lt; 80 OR score &gt; 90) AND gender = &#39;M&#39;;</code></p><p>如果不加括号，条件运算按照 NOT、AND、OR 的优先级进行。</p><h3 id="常用的条件表达式"><a href="#常用的条件表达式" class="headerlink" title="常用的条件表达式"></a>常用的条件表达式</h3><table><thead><tr><th>条件</th><th>表达式举例1</th><th>表达式举例2</th><th>说明</th></tr></thead><tbody><tr><td>使用=判断相等</td><td>score = 80</td><td>name = 'abc'</td><td>字符串需要用单引号括起来</td></tr><tr><td>使用&gt;判断大于</td><td>score &gt; 80</td><td>name &gt; 'abc'</td><td>字符串比较根据ASCII码，中文字符比较根据数据库设置</td></tr><tr><td>使用&gt;=判断大于或相等</td><td>score &gt;= 80</td><td>name &gt;= 'abc'</td><td></td></tr><tr><td>使用&lt;判断小于</td><td>score &lt; 80</td><td>name &lt;= 'abc'</td><td></td></tr><tr><td>使用&lt;=判断小于或相等</td><td>score &lt;= 80</td><td>name &lt;= 'abc'</td><td></td></tr><tr><td>使用&lt;&gt;判断不相等</td><td>score &lt;&gt; 80</td><td>name &lt;&gt; 'abc'</td><td></td></tr><tr><td>使用LIKE判断相似</td><td>name LIKE 'ab%'</td><td>name LIKE '%bc%'</td><td>%表示任意字符，例如'ab%'将匹配'ab'，'abc'，'abcd'</td></tr></tbody></table><h3 id="举例：查询分数在60分-含-～90分-含-之间的学生可以使用的WHERE语句"><a href="#举例：查询分数在60分-含-～90分-含-之间的学生可以使用的WHERE语句" class="headerlink" title="举例：查询分数在60分(含)～90分(含)之间的学生可以使用的WHERE语句"></a>举例：查询分数在60分(含)～90分(含)之间的学生可以使用的WHERE语句</h3><p>正确的：</p><ul><li><code>WHERE score &gt;= 60 AND score &lt;= 90</code></li><li><code>WHERE score BETWEEN 60 AND 90</code></li></ul><p>错误的：</p><ul><li><code>WHERE score &gt;= 60 OR score &lt;= 90</code>（“或”不符合题意）</li><li><code>WHERE score IN (60, 90)</code>（in是取60或90，不是范围）</li><li><code>WHERE 60 &lt;= score &lt;= 90</code>（语法错误）</li></ul><h2 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h2><p>我们可以用投影查询让结果集仅包含指定列，并且，结果集的列的顺序和原表可以不一样。</p><p><code>SELECT id, score, name FROM students;</code></p><p><code>SELECT 列1, 列2, 列3, ... FROM &lt;表名&gt;</code></p><p>还可以给每一列起个别名，这样，结果集的列名就可以与原表的列名不同。</p><p><code>SELECT id, score points, name FROM students;</code></p><p><code>SELECT 列1 别名1, 列2 别名2, 列3 别名3, ... FROM &lt;表名&gt;</code></p><p>投影查询同样可以接 WHERE 条件，实现复杂的查询。</p><p><code>SELECT id, score points, name FROM students WHERE gender = &#39;M&#39;;</code></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>使用 SELECT 查询时，查询结果集通常是按照 id 排序的，也就是根据主键排序。这也是大部分数据库的做法。如果要根据其他条件排序，可以加上 ORDER BY 子句。</p><p><code>SELECT id, name, gender, score FROM students ORDER BY score;</code></p><p>默认的排序规则是 ASC：“升序”，即从小到大，ASC可以省略。如果要反过来，按照从高到底排序，可以加上 DESC 表示“倒序”。</p><p><code>SELECT id, name, gender, score FROM students ORDER BY score DESC;</code></p><p>如果 score 列有相同的数据，要进一步排序，可以继续添加列名。例如，使用 ORDER BY score DESC, gender 表示先按 score 列倒序，如果有相同分数的，再按 gender 列排序。</p><p><code>SELECT id, name, gender, score FROM students ORDER BY score DESC, gender;</code></p><p>如果有 WHERE 子句，那么 ORDER BY 子句要放到 WHERE 子句后面。</p><p><code>SELECT id, name, gender, score FROM students WHERE class_id = 1 ORDER BY score DESC;</code></p><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>使用 SELECT 查询时，如果结果集数据量很大，比如几万行数据，放在一个页面显示的话数据量太大，不如分页显示，每次显示100条。</p><p>要实现分页功能，实际上就是从结果集中显示第1<del>100条记录作为第1页，显示第101</del>200条记录作为第2页，以此类推。</p><p>因此，分页实际上就是从结果集中“截取”出第M~N条记录。这个查询可以通过 <code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code> 子句实现。</p><p>先把所有学生按照成绩从高到低进行排序：</p><p><code>SELECT id, name, gender, score FROM students ORDER BY score DESC, gender;</code></p><p>现在，我们把结果集分页，每页3条记录。要获取第1页的记录，可以使用<code>LIMIT 3 OFFSET 0</code>：</p><p><code>SELECT id, name, gender, score FROM students ORDER BY score DESC, gender LIMIT 3 OFFSET 0;</code></p><p>上述查询<code>LIMIT 3 OFFSET 0</code>表示，对结果集从0号记录开始，最多取3条。注意SQL记录集的索引从0开始。</p><p>如果要查询第2页，那么我们只需要“跳过”头3条记录，也就是对结果集从3号记录开始查询，把OFFSET设定为3。</p><p><code>SELECT id, name, gender, score FROM students ORDER BY score DESC, gender LIMIT 3 OFFSET 3;</code></p><p>由于第4页只有1条记录，因此最终结果集按实际数量1显示。LIMIT 3表示的意思是“最多3条记录”。</p><p>可见，分页查询的关键在于，首先要确定每页需要显示的结果数量pageSize（这里是3），然后根据当前页的索引pageIndex（从1开始），确定LIMIT和OFFSET应该设定的值：</p><ul><li>LIMIT总是设定为pageSize；</li><li>OFFSET计算公式为pageSize * (pageIndex - 1)。</li></ul><p>如果原本记录集一共就10条记录，但我们把OFFSET设置为20,OFFSET超过了查询的最大数量并不会报错，而是得到一个空的结果集。</p><p>OFFSET是可选的，如果只写LIMIT 15，那么相当于LIMIT 15 OFFSET 0。</p><p>在MySQL中，LIMIT 15 OFFSET 30还可以简写成LIMIT 30, 15。</p><p>使用<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>分页时，随着N越来越大，查询效率也会越来越低。</p><p>在分页查询之前，如何计算一共有几页：</p><p><code>select count(*) from students;</code></p><p>返回该表的记录总数量，然后除以limit指定的每页显示的数量，有余数结果加一就是页数。</p><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><p>对于统计总数、平均数这类计算，SQL提供了专门的聚合函数，使用聚合函数进行查询，就是聚合查询，它可以快速获得结果。</p><p>仍然以查询students表一共有多少条记录为例，我们可以使用SQL内置的COUNT()函数查询：</p><p><code>SELECT COUNT(*) FROM students;</code></p><p><code>COUNT(*)</code>表示查询所有列的行数，要注意聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是<code>COUNT(*)</code>。</p><p>通常，使用聚合查询时，我们应该给列名设置一个别名，比如num，便于处理结果：</p><p><code>SELECT COUNT(*) num FROM students;</code></p><p>COUNT(*)和COUNT(id)实际上是一样的效果。另外注意，聚合查询同样可以使用WHERE条件，因此我们可以方便地统计出有多少男生、多少女生、多少80分以上的学生等：</p><p><code>SELECT COUNT(*) boys FROM students WHERE gender = &#39;M&#39;;</code></p><p>除了COUNT()函数外，SQL还提供了如下聚合函数：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SUM</td><td>计算某一列的合计值，该列必须为数值类型</td></tr><tr><td>AVG</td><td>计算某一列的平均值，该列必须为数值类型</td></tr><tr><td>MAX</td><td>计算某一列的最大值</td></tr><tr><td>MIN</td><td>计算某一列的最小值</td></tr></tbody></table><p>注意，MAX()和MIN()函数并不限于数值类型。如果是字符类型，MAX()和MIN()会返回排序最后和排序最前的字符。</p><p>使用聚合查询计算男生平均成绩:</p><p><code>SELECT AVG(score) average FROM students WHERE gender = &#39;M&#39;;</code></p><p>要特别注意：如果聚合查询的WHERE条件没有匹配到任何行，COUNT()会返回0，而SUM()、AVG()、MAX()和MIN()会返回NULL：</p><p><code>SELECT AVG(score) average FROM students WHERE gender = &#39;X&#39;;</code></p><p>每页3条记录，如何通过聚合查询获得总页数：</p><p><code>SELECT CEILING(COUNT(*) / 3) FROM students;</code></p><p>如果要统计一班的学生数量，可以用<code>SELECT COUNT(*) num FROM students WHERE class_id = 1;</code>。如果要继续统计二班、三班的学生数量，难道必须不断修改WHERE条件来执行SELECT语句吗？</p><p>对于聚合查询，SQL还提供了“分组聚合”的功能。</p><p><code>SELECT COUNT(*) num FROM students GROUP BY class_id;</code></p><p>执行这个查询，COUNT()的结果不再是一个，而是3个，这是因为，GROUP BY子句指定了按class_id分组，因此，执行该SELECT语句时，会把class_id相同的列先分组，再分别计算，因此，得到了3行结果。</p><p>但是这3行结果分别是哪三个班级的，不好看出来，所以我们可以把class_id列也放入结果集中：</p><p><code>SELECT class_id, COUNT(*) num FROM students GROUP BY class_id;</code></p><p>也可以使用多个列进行分组。例如，我们想统计各班的男生和女生人数：</p><p><code>SELECT class_id, gender, COUNT(*) num FROM students GROUP BY class_id, gender;</code></p><p>请使用一条SELECT查询查出每个班级的平均分，结果集应当有3条记录：</p><p><code>SELECT class_id, AVG(score) average FROM students GROUP BY class_id;</code></p><p>请使用一条SELECT查询查出每个班级男生和女生的平均分，结果集应当有6条记录：</p><p><code>SELECT class_id, gender, AVG(score) average FROM students GROUP BY class_id, gender;</code></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>SELECT查询不但可以从一张表查询数据，还可以从多张表同时查询数据。查询多张表的语法是：<code>SELECT * FROM &lt;表1&gt; &lt;表2&gt;</code>。</p><p>例如，同时从students表和classes表的“乘积”，即查询数据，可以这么写：</p><p><code>SELECT * FROM students, classes;</code></p><p>这种一次查询两个表的数据，查询的结果也是一个二维表，它是students表和classes表的“乘积”，即students表的每一行与classes表的每一行都两两拼在一起返回。结果集的列数是students表和classes表的列数之和，行数是students表和classes表的行数之积。</p><p>这种多表查询又称笛卡尔查询，使用笛卡尔查询时要非常小心，由于结果集是目标表的行数乘积，对两个各自有100行记录的表进行笛卡尔查询将返回1万条记录，对两个各自有1万行记录的表进行笛卡尔查询将返回1亿条记录。</p><p>你可能还注意到了，上述查询的结果集有两列id和两列name，两列id是因为其中一列是students表的id，而另一列是classes表的id，但是在结果集中，不好区分。两列name同理。</p><p>要解决这个问题，我们仍然可以利用投影查询的“设置列的别名”来给两个表各自的id和name列起别名：</p><p><code>SELECT students.id sid, students.name, students.gender, students.score, classes.id cid, classes.name cname FROM students, classes;</code></p><p>注意，多表查询时，要使用表名.列名这样的方式来引用列和设置别名，这样就避免了结果集的列名重复问题。但是，用表名.列名这种方式列举两个表的所有列实在是很麻烦，所以SQL还允许给表设置一个别名，让我们在投影查询中引用起来稍微简洁一点：</p><p><code>SELECT s.id sid, s.name, s.gender, s.score, c.id cid, c.name cname FROM students s, classes c;</code></p><p>注意到FROM子句给表设置别名的语法是FROM &lt;表名1&gt; &lt;别名1&gt;, &lt;表名2&gt; &lt;别名2&gt;。这样我们用别名s和c分别表示students表和classes表。</p><p>多表查询也是可以添加WHERE条件的，我们来试试：</p><p><code>SELECT s.id sid, s.name, s.gender, s.score, c.id cid, c.name cname FROM students s, classes c WHERE s.gender = &#39;M&#39; AND c.id = 1;</code></p><p>这个查询的结果集每行记录都满足条件s.gender &#x3D; ‘M’和c.id &#x3D; 1。添加WHERE条件后结果集的数量大大减少了。</p><p>小结：</p><p>使用多表查询可以获取M x N行记录；</p><p>多表查询的结果集可能非常巨大，要小心使用。</p><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p>连接查询是另一种类型的多表查询。连接查询对多个表进行JOIN运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。</p><p>例如，我们想要选出students表的所有学生信息，可以用一条简单的SELECT语句完成：</p><p><code>SELECT s.id, s.name, s.class_id, s.gender, s.score FROM students s;</code></p><p>但是，假设我们希望结果集同时包含所在班级的名称，上面的结果集只有class_id列，缺少对应班级的name列。</p><p>现在问题来了，存放班级名称的name列存储在classes表中，只有根据students表的class_id，找到classes表对应的行，再取出name列，就可以获得班级名称。</p><p>这时，连接查询就派上了用场。我们先使用最常用的一种内连接——INNER JOIN来实现：</p><p><code>SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score FROM students s INNER JOIN classes c ON s.class_id = c.id;</code></p><p>注意INNER JOIN查询的写法是：</p><ul><li>先确定主表，仍然使用FROM &lt;表1&gt;的语法；</li><li>再确定需要连接的表，使用INNER JOIN &lt;表2&gt;的语法；</li><li>然后确定连接条件，使用ON &lt;条件…&gt;，这里的条件是s.class_id &#x3D; c.id，表示students表的class_id列与classes表的id列相同的行需要连接；</li><li>可选：加上WHERE子句、ORDER BY等子句。</li><li>使用别名不是必须的，但可以更好地简化查询语句。</li></ul><p>有内连接（INNER JOIN）就有外连接（OUTER JOIN）。我们把内连接查询改成外连接查询，看看效果：</p><p><code>SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score FROM students s RIGHT OUTER JOIN classes c ON s.class_id = c.id;</code></p><p>执行上述RIGHT OUTER JOIN可以看到，和INNER JOIN相比，RIGHT OUTER JOIN多了一行，多出来的一行是“四班”，但是，学生相关的列如name、gender、score都为NULL。</p><p>这也容易理解，因为根据ON条件s.class_id &#x3D; c.id，classes表的id&#x3D;4的行正是“四班”，但是，students表中并不存在class_id&#x3D;4的行。</p><p>有RIGHT OUTER JOIN，就有LEFT OUTER JOIN，以及FULL OUTER JOIN。它们的区别是：</p><ul><li>INNER JOIN只返回同时存在于两张表的行数据，由于students表的class_id包含1，2，3，classes表的id包含1，2，3，4，所以，INNER JOIN根据条件s.class_id &#x3D; c.id返回的结果集仅包含1，2，3。</li><li>RIGHT OUTER JOIN返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以NULL填充剩下的字段。</li><li>LEFT OUTER JOIN则返回左表都存在的行。如果我们给students表增加一行，并添加class_id&#x3D;5，由于classes表并不存在id&#x3D;5的行，所以，LEFT OUTER JOIN的结果会增加一行，对应的class_name是NULL：</li></ul><p>先增加一列class_id&#x3D;5:</p><p><code>INSERT INTO students (class_id, name, gender, score) values (5, &#39;新生&#39;, &#39;M&#39;, 88);</code></p><p>使用LEFT OUTER JOIN：</p><p><code>SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score FROM students s LEFT OUTER JOIN classes c ON s.class_id = c.id;</code></p><p>最后，我们使用FULL OUTER JOIN，它会把两张表的所有记录全部选择出来，并且，自动把对方不存在的列填充为NULL：</p><p><code>SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score FROM students s FULL OUTER JOIN classes c ON s.class_id = c.id;</code></p><p>注意：mysql是不支持full join的，但仍然可以同过左外连接+ union+右外连接实现</p><p><code>SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score FROM students s LEFT OUTER JOIN classes c ON s.class_id = c.id UNION SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score FROM students s RIGHT OUTER JOIN classes c ON s.class_id = c.id;</code></p><p>对于这么多种JOIN查询，到底什么使用应该用哪种呢？其实我们用图来表示结果集就一目了然了。</p><p>假设查询语句是：</p><p><code>SELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2;</code></p><p><img src="/img/2021-12-11-self-learn-sql/1.png"></p><p>小结：</p><ul><li>JOIN查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；</li><li>INNER JOIN是最常用的一种JOIN查询，它的语法是SELECT … FROM &lt;表1&gt; INNER JOIN &lt;表2&gt; ON &lt;条件…&gt;；</li><li>JOIN查询仍然可以使用WHERE条件和ORDER BY排序。</li></ul><h1 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h1><p>关系数据库的基本操作就是增删改查，即CRUD：Create、Retrieve、Update、Delete。其中，对于查询，我们已经详细讲述了SELECT语句的详细用法。</p><p>而对于增、删、改，对应的SQL语句分别是：</p><ul><li>INSERT：插入新记录；</li><li>UPDATE：更新已有记录；</li><li>DELETE：删除已有记录。</li></ul><p>我们将分别讨论这三种修改数据的语句的使用方法。</p><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><p>当我们需要向数据库表中插入一条新记录时，就必须使用INSERT语句。</p><p>INSERT语句的基本语法是：</p><p><code>INSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...);</code></p><p>例如，我们向students表插入一条新记录，先列举出需要插入的字段名称，然后在VALUES子句中依次写出对应字段的值：</p><p>添加一条新记录:</p><p><code>INSERT INTO students (class_id, name, gender, score) VALUES (2, &#39;大牛&#39;, &#39;M&#39;, 80);</code></p><p>查询并观察结果:</p><p><code>SELECT * FROM students;</code></p><p>注意到我们并没有列出id字段，也没有列出id字段对应的值，这是因为id字段是一个自增主键，它的值可以由数据库自己推算出来。此外，如果一个字段有默认值，那么在INSERT语句中也可以不出现。</p><p>要注意，字段顺序不必和数据库表的字段顺序一致，但值的顺序必须和字段顺序一致。也就是说，可以写INSERT INTO students (score, gender, name, class_id) …，但是对应的VALUES就得变成(80, ‘M’, ‘大牛’, 2)。</p><p>还可以一次性添加多条记录，只需要在VALUES子句中指定多个记录值，每个记录是由(…)包含的一组值：</p><p>一次性添加多条新记录:</p><p><code>INSERT INTO students (class_id, name, gender, score) VALUES (1, &#39;大宝&#39;, &#39;M&#39;, 87), (2, &#39;二宝&#39;, &#39;M&#39;, 81);</code></p><p><code>SELECT * FROM students;</code></p><p>小结：使用INSERT，我们就可以一次向一个表中插入一条或多条记录。</p><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><p>如果要更新数据库表中的记录，我们就必须使用UPDATE语句。</p><p>UPDATE语句的基本语法是：</p><p><code>UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, ... WHERE ...;</code></p><p>例如，我们想更新students表id&#x3D;1的记录的name和score这两个字段，先写出UPDATE students SET name&#x3D;’大牛’, score&#x3D;66，然后在WHERE子句中写出需要更新的行的筛选条件id&#x3D;1：</p><p>更新id&#x3D;1的记录:</p><p><code>UPDATE students SET name=&#39;大牛&#39;, score=66 WHERE id=1;</code></p><p>查询并观察结果:</p><p><code>SELECT * FROM students WHERE id=1;</code></p><p>注意到UPDATE语句的WHERE条件和SELECT语句的WHERE条件其实是一样的，因此完全可以一次更新多条记录：</p><p>更新id&#x3D;5,6,7的记录:</p><p><code>UPDATE students SET name=&#39;小牛&#39;, score=77 WHERE id&gt;=5 AND id&lt;=7;</code></p><p>查询并观察结果:</p><p><code>SELECT * FROM students;</code></p><p>在UPDATE语句中，更新字段时可以使用表达式。例如，把所有80分以下的同学的成绩加10分：</p><p>更新score&lt;80的记录:</p><p><code>UPDATE students SET score=score+10 WHERE score&lt;80;</code></p><p>查询并观察结果:</p><p><code>SELECT * FROM students;</code></p><p>其中，SET score&#x3D;score+10就是给当前行的score字段的值加上了10。</p><p>如果WHERE条件没有匹配到任何记录，UPDATE语句不会报错，也不会有任何记录被更新。例如：</p><p>更新id&#x3D;999的记录:</p><p><code>UPDATE students SET score=100 WHERE id=999;</code></p><p>查询并观察结果:</p><p><code>SELECT * FROM students;</code></p><p>最后，要特别小心的是，UPDATE语句可以没有WHERE条件，例如：</p><p><code>UPDATE students SET score=60;</code></p><p>这时，整个表的所有记录都会被更新。所以，在执行UPDATE语句时要非常小心，最好先用SELECT语句来测试WHERE条件是否筛选出了期望的记录集，然后再用UPDATE更新。</p><p>在使用MySQL这类真正的关系数据库时，UPDATE语句会返回更新的行数以及WHERE条件匹配的行数。</p><p>例如，更新id&#x3D;1的记录时：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; UPDATE students SET name=&#x27;大宝&#x27; WHERE id=<span class="hljs-number">1</span>;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">1</span> row affected (<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sec)<br><span class="hljs-attribute">Rows</span> matched: <span class="hljs-number">1</span>  Changed: <span class="hljs-number">1</span>  Warnings: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>MySQL会返回1，可以从打印的结果Rows matched: 1 Changed: 1看到。</p><p>当更新id&#x3D;999的记录时：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; UPDATE students SET name=&#x27;大宝&#x27; WHERE id=<span class="hljs-number">999</span>;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">0</span> rows affected (<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sec)<br><span class="hljs-attribute">Rows</span> matched: <span class="hljs-number">0</span>  Changed: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>MySQL会返回0，可以从打印的结果Rows matched: 0 Changed: 0看到。</p><p>小结：使用UPDATE，我们就可以一次更新表中的一条或多条记录。</p><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p>如果要删除数据库表中的记录，我们可以使用DELETE语句。</p><p>DELETE语句的基本语法是：</p><p><code>DELETE FROM &lt;表名&gt; WHERE ...;</code></p><p>例如，我们想删除students表中id&#x3D;1的记录，就需要这么写：</p><p>删除id&#x3D;1的记录:</p><p><code>DELETE FROM students WHERE id=1;</code></p><p>查询并观察结果:</p><p><code>SELECT * FROM students;</code></p><p>注意到DELETE语句的WHERE条件也是用来筛选需要删除的行，因此和UPDATE类似，DELETE语句也可以一次删除多条记录：</p><p>删除id&#x3D;5,6,7的记录:</p><p><code>DELETE FROM students WHERE id&gt;=5 AND id&lt;=7;</code></p><p>查询并观察结果:</p><p><code>SELECT * FROM students;</code></p><p>如果WHERE条件没有匹配到任何记录，DELETE语句不会报错，也不会有任何记录被删除。例如：</p><p>删除id&#x3D;999的记录:</p><p><code>DELETE FROM students WHERE id=999;</code></p><p>查询并观察结果:</p><p><code>SELECT * FROM students;</code></p><p>最后，要特别小心的是，和UPDATE类似，不带WHERE条件的DELETE语句会删除整个表的数据：</p><p><code>DELETE FROM students;</code></p><p>这时，整个表的所有记录都会被删除。所以，在执行DELETE语句时也要非常小心，最好先用SELECT语句来测试WHERE条件是否筛选出了期望的记录集，然后再用DELETE删除。</p><p>在使用MySQL这类真正的关系数据库时，DELETE语句也会返回删除的行数以及WHERE条件匹配的行数。</p><p>例如，分别执行删除id&#x3D;1和id&#x3D;999的记录：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; DELETE FROM students WHERE id=<span class="hljs-number">1</span>;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">1</span> row affected (<span class="hljs-number">0</span>.<span class="hljs-number">01</span> sec)<br><br><span class="hljs-attribute">mysql</span>&gt; DELETE FROM students WHERE id=<span class="hljs-number">999</span>;<br><span class="hljs-attribute">Query</span> OK, <span class="hljs-number">0</span> rows affected (<span class="hljs-number">0</span>.<span class="hljs-number">01</span> sec)<br></code></pre></td></tr></table></figure><p>小结：使用DELETE，我们就可以一次删除表中的一条或多条记录。</p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>安装完MySQL后，除了MySQL Server，即真正的MySQL服务器外，还附赠一个MySQL Client程序。MySQL Client是一个命令行客户端，可以通过MySQL Client登录MySQL，然后，输入SQL语句并执行。</p><p>打开命令提示符，输入命令mysql -u root -p，提示输入口令。填入MySQL的root口令，如果正确，就连上了MySQL Server，同时提示符变为mysql&gt;。</p><p>输入exit断开与MySQL Server的连接并返回到命令提示符。</p><p>MySQL Client的可执行程序是mysql，MySQL Server的可执行程序是mysqld。</p><p>MySQL Client和MySQL Server的关系如下：</p><pre><code class="language-ascii">┌──────────────┐  SQL   ┌──────────────┐│ MySQL Client │───────&gt;│ MySQL Server │└──────────────┘  TCP   └──────────────┘</code></pre><p>在MySQL Client中输入的SQL语句通过TCP连接发送到MySQL Server。默认端口号是3306，即如果发送到本机MySQL Server，地址就是127.0.0.1:3306。</p><p>也可以只安装MySQL Client，然后连接到远程MySQL Server。假设远程MySQL Server的IP地址是10.0.1.99，那么就使用-h指定IP或域名：</p><p><code>mysql -h 10.0.1.99 -u root -p</code></p><p>小结：命令行程序mysql实际上是MySQL客户端，真正的MySQL服务器程序是mysqld，在后台运行。</p><h2 id="管理MySQL"><a href="#管理MySQL" class="headerlink" title="管理MySQL"></a>管理MySQL</h2><p>要管理MySQL，可以使用可视化图形界面MySQL Workbench。</p><p>MySQL Workbench可以用可视化的方式查询、创建和修改数据库表，但是，归根到底，MySQL Workbench是一个图形客户端，它对MySQL的操作仍然是发送SQL语句并执行。因此，本质上，MySQL Workbench和MySQL Client命令行都是客户端，和MySQL交互，唯一的接口就是SQL。</p><p>因此，MySQL提供了大量的SQL语句用于管理。虽然可以使用MySQL Workbench图形界面来直接管理MySQL，但是，很多时候，通过SSH远程连接时，只能使用SQL命令，所以，了解并掌握常用的SQL管理操作是必须的。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>在一个运行MySQL的服务器上，实际上可以创建多个数据库（Database）。要列出所有数据库，使用命令：<code>SHOW DATABASES;</code></p><p>其中，information_schema、mysql、performance_schema和sys是系统库，不要去改动它们。其他的是用户创建的数据库。</p><p>要创建一个新数据库，使用命令：<code>CREATE DATABASE test1;</code></p><p>要删除一个数据库，使用命令：<code>DROP DATABASE test1;</code></p><p>注意：删除一个数据库将导致该数据库的所有表全部被删除。</p><p>对一个数据库进行操作时，要首先将其切换为当前数据库：<code>USE test;</code></p><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><p>列出当前数据库的所有表，使用命令：<code>SHOW TABLES;</code></p><p>要查看一个表的结构，使用命令：<code>DESC students;</code></p><p>还可以使用以下命令查看创建表的SQL语句：<code>SHOW CREATE TABLE students;</code></p><p>创建表使用CREATE TABLE语句，而删除表使用DROP TABLE语句：<code>DROP TABLE classes;</code></p><p>修改表就比较复杂。如果要给students表新增一列birth，使用：<code>ALTER TABLE students ADD COLUMN birth VARCHAR(10) NOT NULL;</code></p><p>要修改birth列，例如把列名改为birthday，类型改为VARCHAR(20)：<code>ALTER TABLE students CHANGE COLUMN birth birthday VARCHAR(20) NOT NULL;</code></p><p>要删除列，使用：<code>ALTER TABLE students DROP COLUMN birthday;</code></p><h3 id="退出MySQL"><a href="#退出MySQL" class="headerlink" title="退出MySQL"></a>退出MySQL</h3><p>使用EXIT命令退出MySQL：<code>EXIT</code></p><p>注意EXIT仅仅断开了客户端和服务器的连接，MySQL服务器仍然继续运行。</p><h2 id="实用SQL语句"><a href="#实用SQL语句" class="headerlink" title="实用SQL语句"></a>实用SQL语句</h2><p>在编写SQL时，灵活运用一些技巧，可以大大简化程序逻辑。</p><h3 id="插入或替换"><a href="#插入或替换" class="headerlink" title="插入或替换"></a>插入或替换</h3><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就先删除原记录，再插入新记录。此时，可以使用REPLACE语句，这样就不必先查询，再决定是否先删除再插入：</p><p><code>REPLACE INTO students (id, class_id, name, gender, score) VALUES (1, 1, &#39;小明&#39;, &#39;F&#39;, 99);</code></p><p>若id&#x3D;1的记录不存在，REPLACE语句将插入新记录，否则，当前id&#x3D;1的记录将被删除，然后再插入新记录。</p><h3 id="插入或更新"><a href="#插入或更新" class="headerlink" title="插入或更新"></a>插入或更新</h3><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就更新该记录，此时，可以使用INSERT INTO … ON DUPLICATE KEY UPDATE …语句：</p><p><code>INSERT INTO students (id, class_id, name, gender, score) VALUES (1, 1, &#39;小明&#39;, &#39;F&#39;, 99) ON DUPLICATE KEY UPDATE name=&#39;小明&#39;, gender=&#39;F&#39;, score=99;</code></p><p>若id&#x3D;1的记录不存在，INSERT语句将插入新记录，否则，当前id&#x3D;1的记录将被更新，更新的字段由UPDATE指定。</p><h3 id="插入或忽略"><a href="#插入或忽略" class="headerlink" title="插入或忽略"></a>插入或忽略</h3><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就啥事也不干直接忽略，此时，可以使用INSERT IGNORE INTO …语句：</p><p><code>INSERT IGNORE INTO students (id, class_id, name, gender, score) VALUES (1, 1, &#39;小明&#39;, &#39;F&#39;, 99);</code></p><p>若id&#x3D;1的记录不存在，INSERT语句将插入新记录，否则，不执行任何操作。</p><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>如果想要对一个表进行快照，即复制一份当前表的数据到一个新表，可以结合CREATE TABLE和SELECT：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 对class_id=1的记录进行快照，并存储为新表students_of_class1:</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> students_of_class1 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> class_id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>新创建的表结构和SELECT使用的表结构完全一致。</p><h3 id="写入查询结果集"><a href="#写入查询结果集" class="headerlink" title="写入查询结果集"></a>写入查询结果集</h3><p>如果查询结果集需要写入到表中，可以结合INSERT和SELECT，将SELECT语句的结果集直接插入到指定表中。</p><p>例如，创建一个统计成绩的表statistics，记录各班的平均成绩：</p><p><code>CREATE TABLE statistics (id BIGINT NOT NULL AUTO_INCREMENT, class_id BIGINT NOT NULL, average DOUBLE NOT NULL, PRIMARY KEY (id));</code></p><p>然后，我们就可以用一条语句写入各班的平均成绩：</p><p><code>INSERT INTO statistics (class_id, average) SELECT class_id, AVG(score) FROM students GROUP BY class_id;</code></p><p>确保INSERT语句的列和SELECT语句的列能一一对应，就可以在statistics表中直接保存查询的结果：</p><p><code>SELECT * FROM statistics;</code></p><h3 id="强制使用指定索引"><a href="#强制使用指定索引" class="headerlink" title="强制使用指定索引"></a>强制使用指定索引</h3><p>在查询的时候，数据库系统会自动分析查询语句，并选择一个最合适的索引。但是很多时候，数据库系统的查询优化器并不一定总是能使用最优索引。如果我们知道如何选择索引，可以使用FORCE INDEX强制查询使用指定的索引。例如：</p><p><code>SELECT * FROM students FORCE INDEX (idx_class_id) WHERE class_id = 1 ORDER BY id DESC;</code></p><p>指定索引的前提是索引idx_class_id必须存在。</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>在执行SQL语句的时候，某些业务要求，一系列操作必须全部执行，而不能仅执行一部分。例如，一个转账操作：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">-- 从<span class="hljs-attribute">id</span>=1的账户给id=2的账户转账100元<br>-- 第一步：将<span class="hljs-attribute">id</span>=1的A账户余额减去100<br>UPDATE accounts <span class="hljs-built_in">SET</span> balance = balance - 100 WHERE id = 1;<br>-- 第二步：将<span class="hljs-attribute">id</span>=2的B账户余额加上100<br>UPDATE accounts <span class="hljs-built_in">SET</span> balance = balance + 100 WHERE id = 2;<br></code></pre></td></tr></table></figure><p>这两条SQL语句必须全部执行，或者，由于某些原因，如果第一条语句成功，第二条语句失败，就必须全部撤销。</p><p>这种把多条语句作为一个整体进行操作的功能，被称为数据库事务。数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败。如果事务失败，那么效果就和没有执行这些SQL一样，不会对数据库数据有任何改动。</p><p>可见，数据库事务具有ACID这4个特性：</p><ul><li>A：Atomic，原子性，将所有SQL作为原子工作单元执行，要么全部执行，要么全部不执行；</li><li>C：Consistent，一致性，事务完成后，所有数据的状态都是一致的，即A账户只要减去了100，B账户则必定加上了100；</li><li>I：Isolation，隔离性，如果有多个事务并发执行，每个事务作出的修改必须与其他事务隔离；</li><li>D：Duration，持久性，即事务完成后，对数据库数据的修改被持久化存储。</li></ul><p>对于单条SQL语句，数据库系统自动将其作为一个事务执行，这种事务被称为隐式事务。</p><p>要手动把多条SQL语句作为一个事务执行，使用BEGIN开启一个事务，使用COMMIT提交一个事务，这种事务被称为显式事务，例如，把上述的转账操作作为一个显式事务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-keyword">UPDATE</span> accounts <span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">-</span> <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">UPDATE</span> accounts <span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">+</span> <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure><p>很显然多条SQL语句要想作为一个事务执行，就必须使用显式事务。</p><p>COMMIT是指提交事务，即试图把事务内的所有SQL所做的修改永久保存。如果COMMIT语句执行失败了，整个事务也会失败。</p><p>有些时候，我们希望主动让事务失败，这时，可以用ROLLBACK回滚事务，整个事务会失败：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-keyword">UPDATE</span> accounts <span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">-</span> <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">UPDATE</span> accounts <span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">+</span> <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">ROLLBACK</span>;<br></code></pre></td></tr></table></figure><p>数据库事务是由数据库系统保证的，我们只需要根据业务逻辑使用它就可以。</p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>对于两个并发执行的事务，如果涉及到操作同一条记录的时候，可能会发生问题。因为并发操作会带来数据的不一致性，包括脏读、不可重复读、幻读等。数据库系统提供了隔离级别来让我们有针对性地选择事务的隔离级别，避免数据不一致的问题。</p><p>SQL标准定义了4种隔离级别，分别对应可能出现的数据不一致的情况：</p><table><thead><tr><th>Isolation Level</th><th>脏读（Dirty Read）</th><th>不可重复读（Non Repeatable Read）</th><th>幻读（Phantom Read）</th></tr></thead><tbody><tr><td>Read Uncommitted</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Read Committed</td><td>-</td><td>Yes</td><td>Yes</td></tr><tr><td>Repeatable Read</td><td>-</td><td>-</td><td>Yes</td></tr><tr><td>Serializable</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p>我们会依次介绍4种隔离级别的数据一致性问题。</p><p>小结：数据库事务具有ACID特性，用来保证多条SQL的全部执行。</p><h3 id="Read-Uncommitted"><a href="#Read-Uncommitted" class="headerlink" title="Read Uncommitted"></a>Read Uncommitted</h3><p>Read Uncommitted是隔离级别最低的一种事务级别。在这种隔离级别下，一个事务会读到另一个事务更新后但未提交的数据，如果另一个事务回滚，那么当前事务读到的数据就是脏数据，这就是脏读（Dirty Read）。</p><h3 id="Read-Committed"><a href="#Read-Committed" class="headerlink" title="Read Committed"></a>Read Committed</h3><p>在Read Committed隔离级别下，一个事务可能会遇到不可重复读（Non Repeatable Read）的问题。</p><p>不可重复读是指，在一个事务内，多次读同一数据，在这个事务还没有结束时，如果另一个事务恰好修改了这个数据，那么，在第一个事务中，两次读取的数据就可能不一致。</p><h3 id="Repeatable-Read"><a href="#Repeatable-Read" class="headerlink" title="Repeatable Read"></a>Repeatable Read</h3><p>在Repeatable Read隔离级别下，一个事务可能会遇到幻读（Phantom Read）的问题。</p><p>幻读是指，在一个事务中，第一次查询某条记录，发现没有，但是，当试图更新这条不存在的记录时，竟然能成功，并且，再次读取同一条记录，它就神奇地出现了。</p><h3 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h3><p>Serializable是最严格的隔离级别。在Serializable隔离级别下，所有事务按照次序依次执行，因此，脏读、不可重复读、幻读都不会出现。</p><p>虽然Serializable隔离级别下的事务具有最高的安全性，但是，由于事务是串行执行，所以效率会大大下降，应用程序的性能会急剧降低。如果没有特别重要的情景，一般都不会使用Serializable隔离级别。</p><h3 id="默认隔离级别"><a href="#默认隔离级别" class="headerlink" title="默认隔离级别"></a>默认隔离级别</h3><p>如果没有指定隔离级别，数据库就会使用默认的隔离级别。在MySQL中，如果使用InnoDB，默认的隔离级别是Repeatable Read。</p><h1 id="开发集成"><a href="#开发集成" class="headerlink" title="开发集成"></a>开发集成</h1><h1 id="期末总结"><a href="#期末总结" class="headerlink" title="期末总结"></a>期末总结</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 自学笔记</title>
    <link href="/2021/12/10/2021-12-10-self-learn-python/"/>
    <url>/2021/12/10/2021-12-10-self-learn-python/</url>
    
    <content type="html"><![CDATA[<p>&amp;emsp;</p><p><code>ch2.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 基础</span><br><br><span class="hljs-comment"># title()把字符串中所有单词的首字母转为大写</span><br><span class="hljs-comment"># istitle()检查字符串中所有单词的首字母是否为大写，且其他字母为小写</span><br>name = <span class="hljs-string">&quot;roach lin&quot;</span><br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-built_in">print</span>(name.istitle())<br>name = name.title()<br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-built_in">print</span>(name.istitle())<br><span class="hljs-comment"># 注意，非字母后的第一个字母将转为大写字母</span><br><span class="hljs-comment"># 该算法使用一种简单的与语言无关的定义，将连续的字母组合视为单词</span><br>txt = <span class="hljs-string">&quot;hello b2b2b2 and 3g3g3g&quot;</span><br><span class="hljs-built_in">print</span>(txt.title())<br><span class="hljs-comment"># upper()把字符串中所有小写字母转为大写</span><br><span class="hljs-comment"># isupper()检查字符串中所有字母是否为大写</span><br>name = name.upper()<br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-built_in">print</span>(name.isupper())<br><span class="hljs-comment"># lower()把字符串中所有大写字母转为小写</span><br><span class="hljs-comment"># islower()检查字符串中所有字母是否为小写</span><br>name = name.lower()<br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-built_in">print</span>(name.islower())<br><br><span class="hljs-comment"># 字符串拼接</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;roach&quot;</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-string">&quot;lin&quot;</span>)<br><br><span class="hljs-comment"># 输出制表符（tab）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;python\tpython&quot;</span>)<br><span class="hljs-comment"># 输出换行符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;python\npython&quot;</span>)<br><br><span class="hljs-comment"># strip()移除字符串头尾指定的字符（默认为空格）</span><br><span class="hljs-comment"># lstrip()只移除字符串头处，rstrip()只移除字符串尾处</span><br><span class="hljs-comment"># 注意，该方法只能删除开头或结尾的字符，不能删除中间的字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;   spacious   &#x27;</span>.strip())<br><span class="hljs-comment"># 把参数看作一个列表，从头/尾开始逐一删除符合列表的字符，直到遇到一个不在列表中的字符为止</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;www.example.com&#x27;</span>.strip(<span class="hljs-string">&#x27;cmowz.&#x27;</span>))<br><br><span class="hljs-comment"># 乘方</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> ** <span class="hljs-number">6</span>)<br><br><span class="hljs-comment"># str()转为字符串</span><br><br><span class="hljs-comment"># 单行注释</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">多行注释1</span><br><span class="hljs-string">多行注释2</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">多行注释3</span><br><span class="hljs-string">多行注释4</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># Python之禅</span><br><span class="hljs-keyword">import</span> this<br></code></pre></td></tr></table></figure><p>&amp;emsp;</p><p><code>ch3.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表</span><br><span class="hljs-comment"># 可以把任何东西放入列表中，列表元素之间可以没有任何关系</span><br><br><span class="hljs-comment"># 查</span><br>net = [<span class="hljs-string">&#x27;google&#x27;</span>, <span class="hljs-string">&#x27;baidu&#x27;</span>, <span class="hljs-string">&#x27;tencent&#x27;</span>, <span class="hljs-string">&#x27;netease&#x27;</span>]<br><span class="hljs-built_in">print</span>(net)<br><span class="hljs-built_in">print</span>(net[<span class="hljs-number">0</span>])<br><span class="hljs-comment"># 索引为-1返回最后一个元素，索引为-2返回倒数第二个元素，依此类推，在不知道列表长度时很有用</span><br><span class="hljs-built_in">print</span>(net[-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># 改</span><br>net[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;riot&#x27;</span><br><span class="hljs-built_in">print</span>(net)<br><br><span class="hljs-comment"># 增</span><br><span class="hljs-comment"># 使用append()在列表末尾添加元素</span><br>net.append(<span class="hljs-string">&#x27;CDPR&#x27;</span>)<br><span class="hljs-built_in">print</span>(net)<br><span class="hljs-comment"># 使用insert()在列表中插入元素</span><br>net.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;bilibili&#x27;</span>)  <span class="hljs-comment"># 尤其小心索引位置</span><br><span class="hljs-built_in">print</span>(net)<br><br><span class="hljs-comment"># 删</span><br><span class="hljs-comment"># 使用del删除元素</span><br><span class="hljs-keyword">del</span> net[<span class="hljs-number">4</span>]<br><span class="hljs-built_in">print</span>(net)<br><span class="hljs-comment"># 使用pop()删除元素并存到新变量中，参数为空则默认删除最后一个</span><br>other1 = net.pop()<br><span class="hljs-built_in">print</span>(net)<br><span class="hljs-built_in">print</span>(other1)<br>other2 = net.pop(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(net)<br><span class="hljs-built_in">print</span>(other2)<br><span class="hljs-comment"># 使用remove()根据值删除元素</span><br><span class="hljs-comment"># 注意，remove()只移除列表中某个值的第一个匹配项</span><br>net.remove(<span class="hljs-string">&#x27;tencent&#x27;</span>)<br><span class="hljs-built_in">print</span>(net)<br><br><span class="hljs-comment"># 排序</span><br><span class="hljs-comment"># 使用sort()对列表进行永久性排序</span><br>net = [<span class="hljs-string">&#x27;google&#x27;</span>, <span class="hljs-string">&#x27;baidu&#x27;</span>, <span class="hljs-string">&#x27;tencent&#x27;</span>, <span class="hljs-string">&#x27;netease&#x27;</span>, <span class="hljs-string">&#x27;bilibili&#x27;</span>, <span class="hljs-string">&#x27;acfun&#x27;</span>, <span class="hljs-string">&#x27;riot&#x27;</span>]<br>net.sort()<br><span class="hljs-built_in">print</span>(net)<br><span class="hljs-comment"># 参数reverse为空默认是按字母顺序排列，反序排列要指定reverse为True</span><br>net = [<span class="hljs-string">&#x27;google&#x27;</span>, <span class="hljs-string">&#x27;baidu&#x27;</span>, <span class="hljs-string">&#x27;tencent&#x27;</span>, <span class="hljs-string">&#x27;netease&#x27;</span>, <span class="hljs-string">&#x27;bilibili&#x27;</span>, <span class="hljs-string">&#x27;acfun&#x27;</span>, <span class="hljs-string">&#x27;riot&#x27;</span>]<br>net.sort(reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(net)<br><br><br><span class="hljs-comment"># 参数key指定一个函数，表示按列表元素中的哪一个部分进行排列</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">second</span>(<span class="hljs-params">elem</span>):<br>    <span class="hljs-keyword">return</span> elem[<span class="hljs-number">1</span>]<br><br><br>tmp = [(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">6</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">7</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">8</span>, <span class="hljs-number">3</span>)]<br>tmp.sort(key=second)<br><span class="hljs-built_in">print</span>(tmp)<br><br><span class="hljs-comment"># key还可以是匿名函数</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">python使用lambda来创建匿名函数。</span><br><span class="hljs-string">    lambda只是一个表达式，函数体比def简单很多。</span><br><span class="hljs-string">    lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</span><br><span class="hljs-string">    lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。</span><br><span class="hljs-string">    虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</span><br><span class="hljs-string">lambda函数的语法只包含一个语句：lambda [arg1 [,arg2,.....argn]]:expression</span><br><span class="hljs-string">例子如下：</span><br><span class="hljs-string">sum = lambda arg1, arg2: arg1 + arg2</span><br><span class="hljs-string">print(sum(10, 20))</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>example_list = [<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>example_list.sort(key=<span class="hljs-keyword">lambda</span> x: x * -<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(example_list)<br><br><span class="hljs-comment"># 使用sorted()对列表进行临时排序</span><br><span class="hljs-comment"># 这会让列表按特定顺序显示，但不会改变列表的原始顺序</span><br>net = [<span class="hljs-string">&#x27;google&#x27;</span>, <span class="hljs-string">&#x27;baidu&#x27;</span>, <span class="hljs-string">&#x27;tencent&#x27;</span>, <span class="hljs-string">&#x27;netease&#x27;</span>, <span class="hljs-string">&#x27;bilibili&#x27;</span>, <span class="hljs-string">&#x27;acfun&#x27;</span>, <span class="hljs-string">&#x27;riot&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(net))<br><span class="hljs-built_in">print</span>(net)<br><span class="hljs-comment"># sorted()同样有参数reverse和key，用法与上面完全相同</span><br><br><span class="hljs-comment"># 使用reverse()反转列表的顺序</span><br><span class="hljs-comment"># 注意，reverse()不是指按与字母顺序相反的顺序进行排列，而是单纯地反转列表顺序，无论列表是否有序</span><br><span class="hljs-comment"># reverse()永久性地修改了列表的排列顺序，但可再次使用reverse()恢复到原来的状态</span><br>net.reverse()<br><span class="hljs-built_in">print</span>(net)<br><br><span class="hljs-comment"># 确定列表的长度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(net))<br></code></pre></td></tr></table></figure><p>&amp;emsp;</p><p><code>ch4.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 操作列表（循环）</span><br>nets = [<span class="hljs-string">&#x27;google&#x27;</span>, <span class="hljs-string">&#x27;bilibili&#x27;</span>, <span class="hljs-string">&#x27;acfun&#x27;</span>, <span class="hljs-string">&#x27;riot&#x27;</span>]<br><span class="hljs-keyword">for</span> net <span class="hljs-keyword">in</span> nets:<br>    <span class="hljs-built_in">print</span>(net)<br>    <span class="hljs-comment"># break</span><br>    <span class="hljs-comment"># continue</span><br><br><span class="hljs-comment"># 若for循环正常结束（有continue也可），则运行else语句</span><br><span class="hljs-comment"># 若for循环被break打断，则不运行else语句</span><br>sites = [<span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-string">&quot;Taobao&quot;</span>]<br><span class="hljs-keyword">for</span> site <span class="hljs-keyword">in</span> sites:<br>    <span class="hljs-keyword">if</span> site == <span class="hljs-string">&quot;Runoob&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;菜鸟教程!&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;循环数据 &quot;</span> + site)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有循环数据!&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成循环!&quot;</span>)<br><br><span class="hljs-comment"># 函数range()</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):  <span class="hljs-comment"># 默认从0开始</span><br>    <span class="hljs-built_in">print</span>(value)<br><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>):  <span class="hljs-comment"># 可以指定区间的值</span><br>    <span class="hljs-built_in">print</span>(value)<br><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>):  <span class="hljs-comment"># 可以指定步长</span><br>    <span class="hljs-built_in">print</span>(value)<br><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">10</span>, -<span class="hljs-number">100</span>, -<span class="hljs-number">10</span>):  <span class="hljs-comment"># 区间从大到小、步长为负数也可</span><br>    <span class="hljs-built_in">print</span>(value)<br><br><span class="hljs-comment"># 使用range()创建列表</span><br>numbers = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(numbers)<br><br><span class="hljs-comment"># 结合range()和len()函数以遍历列表</span><br>nets = [<span class="hljs-string">&#x27;google&#x27;</span>, <span class="hljs-string">&#x27;bilibili&#x27;</span>, <span class="hljs-string">&#x27;acfun&#x27;</span>, <span class="hljs-string">&#x27;riot&#x27;</span>]<br><span class="hljs-keyword">for</span> net <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nets)):<br>    <span class="hljs-built_in">print</span>(net, nets[net])<br><br><span class="hljs-comment"># 列表解析</span><br>squares = [value ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)]<br><span class="hljs-built_in">print</span>(squares)<br><br><span class="hljs-comment"># 对数字列表执行简单的统计计算</span><br>digits = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(digits))  <span class="hljs-comment"># 最小值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(digits))  <span class="hljs-comment"># 最大值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(digits))  <span class="hljs-comment"># 求和</span><br><br><span class="hljs-comment"># pass是空语句，不做任何事情，一般用作占位语句，是为了保持程序结构的完整性。</span><br><br><span class="hljs-comment"># 使用列表的一部分（切片）</span><br>nets = [<span class="hljs-string">&#x27;google&#x27;</span>, <span class="hljs-string">&#x27;bilibili&#x27;</span>, <span class="hljs-string">&#x27;acfun&#x27;</span>, <span class="hljs-string">&#x27;riot&#x27;</span>, <span class="hljs-string">&#x27;cygames&#x27;</span>, <span class="hljs-string">&#x27;can-dao&#x27;</span>]<br><span class="hljs-built_in">print</span>(nets[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>])  <span class="hljs-comment"># 生成子集</span><br><span class="hljs-built_in">print</span>(nets[:<span class="hljs-number">4</span>])  <span class="hljs-comment"># 若没有指定起始索引，则自动从列表开头开始</span><br><span class="hljs-built_in">print</span>(nets[<span class="hljs-number">1</span>:])  <span class="hljs-comment"># 若没有指定终止索引，则一直到列表末尾为止</span><br><span class="hljs-built_in">print</span>(nets[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])  <span class="hljs-comment"># 也可指定步长</span><br><span class="hljs-built_in">print</span>(nets[-<span class="hljs-number">3</span>:])  <span class="hljs-comment"># 负数（代表从列表末尾开始计算距离）同样适用</span><br><br><span class="hljs-comment"># 复制列表</span><br>nets1 = [<span class="hljs-string">&#x27;google&#x27;</span>, <span class="hljs-string">&#x27;bilibili&#x27;</span>, <span class="hljs-string">&#x27;acfun&#x27;</span>]<br>nets2 = nets1  <span class="hljs-comment"># 这是不行的，实际上nets1和nets2指向同一个列表</span><br>nets1.append(<span class="hljs-string">&#x27;riot&#x27;</span>)<br>nets2.append(<span class="hljs-string">&#x27;cygames&#x27;</span>)<br><span class="hljs-built_in">print</span>(nets1)<br><span class="hljs-built_in">print</span>(nets2)<br><br>nets1 = [<span class="hljs-string">&#x27;google&#x27;</span>, <span class="hljs-string">&#x27;bilibili&#x27;</span>, <span class="hljs-string">&#x27;acfun&#x27;</span>]<br>nets3 = nets1[:]<br>nets1.append(<span class="hljs-string">&#x27;riot&#x27;</span>)<br>nets3.append(<span class="hljs-string">&#x27;cygames&#x27;</span>)<br><span class="hljs-built_in">print</span>(nets1)<br><span class="hljs-built_in">print</span>(nets3)<br><br><span class="hljs-comment"># 列表是可以修改的，而不可修改的列表称为元组</span><br>nets = (<span class="hljs-string">&#x27;google&#x27;</span>, <span class="hljs-string">&#x27;bilibili&#x27;</span>, <span class="hljs-string">&#x27;acfun&#x27;</span>)<br><span class="hljs-built_in">print</span>(nets)<br><span class="hljs-comment"># 元组的元素不能修改，但可以对元组变量重新赋值</span><br>nets = (<span class="hljs-string">&#x27;riot&#x27;</span>, <span class="hljs-string">&#x27;cygames&#x27;</span>)<br><span class="hljs-built_in">print</span>(nets)<br></code></pre></td></tr></table></figure><p>&amp;emsp;</p><p><code>ch5.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># if语句</span><br>age1 = <span class="hljs-number">20</span><br>age2 = <span class="hljs-number">22</span><br><span class="hljs-keyword">if</span> age1 &gt;= <span class="hljs-number">18</span> <span class="hljs-keyword">and</span> age2 &lt;= <span class="hljs-number">25</span>:  <span class="hljs-comment"># or类似</span><br>    <span class="hljs-built_in">print</span>(age1 + age2)<br><br>nets = [<span class="hljs-string">&#x27;google&#x27;</span>, <span class="hljs-string">&#x27;bilibili&#x27;</span>, <span class="hljs-string">&#x27;acfun&#x27;</span>, <span class="hljs-string">&#x27;riot&#x27;</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;google&#x27;</span> <span class="hljs-keyword">in</span> nets:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;yes&#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;baidu&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> nets:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;not in&#x27;</span>)<br><br>age = <span class="hljs-number">12</span><br><span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">4</span>:<br>    price = <span class="hljs-number">0</span><br><span class="hljs-keyword">elif</span> age &lt; <span class="hljs-number">18</span>:<br>    price = <span class="hljs-number">5</span><br><span class="hljs-keyword">elif</span> age &lt; <span class="hljs-number">65</span>:<br>    price = <span class="hljs-number">10</span><br><span class="hljs-keyword">elif</span> age &gt;= <span class="hljs-number">65</span>:  <span class="hljs-comment"># 最后的else不是必要的</span><br>    price = <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 当if+列表名时，若列表为空则返回false，否则返回true</span><br>requested = []<br><span class="hljs-keyword">if</span> requested:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;not empty&#x27;</span>)<br></code></pre></td></tr></table></figure><p>&amp;emsp;</p><p><code>ch6.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字典（键值对）</span><br><span class="hljs-comment"># Python不关心键值对的添加顺序，而只关心键和值之间的关联关系</span><br><br><span class="hljs-comment"># 创建空字典</span><br>alien_1 = &#123;&#125;<br><span class="hljs-comment"># 定义一个字典</span><br>alien_0 = &#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;points&#x27;</span>: <span class="hljs-number">5</span>&#125;<br><span class="hljs-comment"># 访问字典中的值</span><br><span class="hljs-built_in">print</span>(alien_0[<span class="hljs-string">&#x27;color&#x27;</span>])<br><span class="hljs-comment"># 添加键值对</span><br>alien_0[<span class="hljs-string">&#x27;x_position&#x27;</span>] = <span class="hljs-number">0</span><br>alien_0[<span class="hljs-string">&#x27;y_position&#x27;</span>] = <span class="hljs-number">25</span><br><span class="hljs-built_in">print</span>(alien_0)<br><span class="hljs-comment"># 修改字典中的值</span><br>alien_0[<span class="hljs-string">&#x27;y_position&#x27;</span>] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(alien_0)<br><span class="hljs-comment"># 删除键值对</span><br><span class="hljs-keyword">del</span> alien_0[<span class="hljs-string">&#x27;y_position&#x27;</span>]<br><span class="hljs-built_in">print</span>(alien_0)<br><br><span class="hljs-comment"># 遍历字典</span><br><span class="hljs-comment"># 遍历所有键值对</span><br>user_0 = &#123;<br>    <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;qcym&#x27;</span>,<br>    <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-string">&#x27;roach&#x27;</span>,<br>    <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-string">&#x27;lin&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> user_0.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nkey: &#x27;</span> + key)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;value: &#x27;</span> + value)<br><span class="hljs-built_in">print</span>(user_0.items())  <span class="hljs-comment"># items()以列表返回可遍历的(键,值)元组数组</span><br><br><span class="hljs-comment"># 遍历所有键</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> user_0.keys():<br>    <span class="hljs-built_in">print</span>(key)<br><span class="hljs-comment"># 遍历字典时会默认遍历所有键</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> user_0:<br>    <span class="hljs-built_in">print</span>(key)<br><span class="hljs-comment"># 可以用sorted()对键进行排序</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(user_0.keys()):<br>    <span class="hljs-built_in">print</span>(key)<br><br><span class="hljs-comment"># 遍历所有值</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> user_0.values():<br>    <span class="hljs-built_in">print</span>(value)<br><span class="hljs-comment"># 使用集合set()剔除重复项，set类似于列表，但每个元素必须是独一无二的</span><br>favorite_languages = &#123;<br>    <span class="hljs-string">&#x27;jen&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>    <span class="hljs-string">&#x27;sarah&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-string">&#x27;edward&#x27;</span>: <span class="hljs-string">&#x27;ruby&#x27;</span>,<br>    <span class="hljs-string">&#x27;phil&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">for</span> language <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>(favorite_languages.values()):<br>    <span class="hljs-built_in">print</span>(language)<br><br><span class="hljs-comment"># 嵌套（将字典存储在列表中，将列表/字典作为值存储在字典中）</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;</p><p><code>ch7.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输入和while循环</span><br><br><span class="hljs-comment"># input()获取的输入是字符串，若要进行数值运算则要先用int()</span><br>message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Please input something: &#x27;</span>)<br><span class="hljs-built_in">print</span>(message)<br><br><span class="hljs-comment"># 求模运算符（%）返回的是两数相除的余数</span><br><br>num = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> num &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(num)<br>    num += <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 设置标志变量flag</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;</p><p><code>ch8.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 函数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">user</span>):  <span class="hljs-comment"># 形参</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello, &#x27;</span> + user)<br><br><br>greet(<span class="hljs-string">&#x27;lin&#x27;</span>)  <span class="hljs-comment"># 实参</span><br><br><span class="hljs-comment"># 位置实参：实参的顺序与形参的顺序一一对应</span><br><br><span class="hljs-comment"># 关键字实参，实参顺序与形参顺序不必对应</span><br>greet(user=<span class="hljs-string">&#x27;roach&#x27;</span>)<br><br><br><span class="hljs-comment"># 可以给形参指定默认值，若有实参则使用实参，若无实参则使用形参的默认值</span><br><span class="hljs-comment"># 使用默认值时，在形参列表中要先列出没有默认值的形参，这样才能正确解读位置实参</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">repeat</span>(<span class="hljs-params">user</span>):<br>    <span class="hljs-keyword">return</span> user<br><br><br><span class="hljs-built_in">print</span>(repeat(<span class="hljs-string">&#x27;lin&#x27;</span>))<br><br><br><span class="hljs-comment"># 可选实参</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">first, last, middle=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> middle:<br>        name = first + <span class="hljs-string">&#x27; &#x27;</span> + middle + <span class="hljs-string">&#x27; &#x27;</span> + last<br>    <span class="hljs-keyword">else</span>:<br>        name = first + <span class="hljs-string">&#x27; &#x27;</span> + last<br>    <span class="hljs-keyword">return</span> name<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;roach&#x27;</span>, <span class="hljs-string">&#x27;lin&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;roach&#x27;</span>, <span class="hljs-string">&#x27;qcym&#x27;</span>, <span class="hljs-string">&#x27;lin&#x27;</span>)<br><br><br><span class="hljs-comment"># 禁止函数修改列表</span><br><span class="hljs-comment"># function_name(list_name[:])传递的是list_name的副本</span><br><br><span class="hljs-comment"># 传递任意数量的实参</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_pizza</span>(<span class="hljs-params">*topping</span>):  <span class="hljs-comment"># 星号*的作用是创建空元组，并将接收到的任意数量的实参都封装到这个元组中</span><br>    <span class="hljs-built_in">print</span>(topping)<br><br><br>make_pizza(<span class="hljs-string">&#x27;pepper&#x27;</span>)<br>make_pizza(<span class="hljs-string">&#x27;mushroom&#x27;</span>, <span class="hljs-string">&#x27;pepper&#x27;</span>, <span class="hljs-string">&#x27;cheese&#x27;</span>)<br><br><br><span class="hljs-comment"># 使用任意数量的关键字实参</span><br><span class="hljs-comment"># 两个星号**的作用是创建空字典，并将接收到的所有键值对都封装到这个字典中</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_profile</span>(<span class="hljs-params">first, last, **user_info</span>):<br>    profile = &#123;<span class="hljs-string">&#x27;first_name&#x27;</span>: first, <span class="hljs-string">&#x27;last_name&#x27;</span>: last&#125;<br>    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> user_info.items():<br>        profile[key] = value<br>    <span class="hljs-keyword">return</span> profile<br><br><br>user_profile = build_profile(<span class="hljs-string">&#x27;albert&#x27;</span>, <span class="hljs-string">&#x27;einstein&#x27;</span>, location=<span class="hljs-string">&#x27;princeton&#x27;</span>, field=<span class="hljs-string">&#x27;physics&#x27;</span>)<br><span class="hljs-built_in">print</span>(user_profile)<br><br><span class="hljs-comment"># 模块（扩展名为.py的文件）</span><br><br><span class="hljs-comment"># 需要指定module_name.function_name()</span><br><span class="hljs-keyword">import</span> time<br><br>start = time.perf_counter()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>)))<br>end = time.perf_counter()<br><span class="hljs-built_in">print</span>((end - start), <span class="hljs-string">&quot;s&quot;</span>)<br><br><span class="hljs-comment"># 只要指定function_name()即可</span><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt, pi<br><br><span class="hljs-built_in">print</span>(pi)<br><span class="hljs-built_in">print</span>(sqrt(<span class="hljs-number">16</span>))<br><br><span class="hljs-comment"># 使用as指定别名</span><br><span class="hljs-comment"># 给函数指定别名：from module_name import function_name as fn</span><br><span class="hljs-comment"># 给模块指定别名：import module_name as mn</span><br><br><span class="hljs-comment"># 导入模块中的所有函数</span><br><span class="hljs-comment"># 注意，最好不要这样做，因为有可能会有同名函数</span><br><span class="hljs-comment"># from module_name import *</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;</p><p><code>ch9.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 类（面向对象编程）</span><br><span class="hljs-comment"># 实例化：基于类创建对象</span><br><br><span class="hljs-comment"># 创建类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):  <span class="hljs-comment"># 构造函数，初始化属性name和age</span><br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sit</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 蹲下</span><br>        <span class="hljs-built_in">print</span>(self.name + <span class="hljs-string">&#x27; is sitting&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">roll_over</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 打滚</span><br>        <span class="hljs-built_in">print</span>(self.name + <span class="hljs-string">&#x27; rolled over&#x27;</span>)<br><br><br><span class="hljs-comment"># 根据类创建实例</span><br>my_dog = Dog(<span class="hljs-string">&#x27;willie&#x27;</span>, <span class="hljs-number">6</span>)<br><span class="hljs-comment"># 访问属性</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;my dog&#x27;s name is &quot;</span> + my_dog.name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;my dog is &#x27;</span> + <span class="hljs-built_in">str</span>(my_dog.age) + <span class="hljs-string">&#x27; years old&#x27;</span>)<br><span class="hljs-comment"># 调用方法</span><br>my_dog.sit()<br>my_dog.roll_over()<br><br><br><span class="hljs-comment"># 使用类和实例</span><br><span class="hljs-comment"># Car类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        self.make = make<br>        self.model = model<br>        self.year = year<br>        self.odometer = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 给属性指定默认值</span><br>        <span class="hljs-comment"># 类中的每个属性都必须有初始值，要么在创建实例时提供，要么在构造函数中设置默认值</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">description</span>(<span class="hljs-params">self</span>):<br>        long_name = <span class="hljs-built_in">str</span>(self.year) + <span class="hljs-string">&#x27; &#x27;</span> + self.make + <span class="hljs-string">&#x27; &#x27;</span> + self.model<br>        <span class="hljs-keyword">return</span> long_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_odometer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;this car has &#x27;</span> + <span class="hljs-built_in">str</span>(self.odometer) + <span class="hljs-string">&#x27; miles on it&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_odometer</span>(<span class="hljs-params">self, mileage</span>):<br>        <span class="hljs-keyword">if</span> mileage &gt;= self.odometer:  <span class="hljs-comment"># 里程表不能往回拨</span><br>            self.odometer = mileage<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;can not roll back&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">increase_odometer</span>(<span class="hljs-params">self, miles</span>):<br>        <span class="hljs-keyword">if</span> miles &gt;= <span class="hljs-number">0</span>:  <span class="hljs-comment"># 里程表不能往回拨</span><br>            self.odometer += miles<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;can not roll back&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_gas_tank</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br>my_new_car = Car(<span class="hljs-string">&#x27;audi&#x27;</span>, <span class="hljs-string">&#x27;a4&#x27;</span>, <span class="hljs-number">2016</span>)<br><span class="hljs-built_in">print</span>(my_new_car.description())<br>my_new_car.read_odometer()<br><br><span class="hljs-comment"># 修改属性的值</span><br><span class="hljs-comment"># 直接修改属性的值</span><br>my_new_car.odometer = <span class="hljs-number">23</span><br>my_new_car.read_odometer()<br><span class="hljs-comment"># 通过方法修改属性的值</span><br>my_new_car.update_odometer(<span class="hljs-number">25</span>)<br>my_new_car.read_odometer()<br>my_new_car.update_odometer(<span class="hljs-number">20</span>)<br>my_new_car.read_odometer()<br><span class="hljs-comment"># 通过方法对属性的值进行递增</span><br>my_new_car.increase_odometer(<span class="hljs-number">100</span>)<br>my_new_car.read_odometer()<br>my_new_car.increase_odometer(-<span class="hljs-number">100</span>)<br>my_new_car.read_odometer()<br><br><br><span class="hljs-comment"># 继承</span><br><span class="hljs-comment"># 子类继承了父类的所有属性和方法，同时还可以定义自己的属性和方法</span><br><span class="hljs-comment"># 子类的方法__init__()</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>):  <span class="hljs-comment"># 指定父类Car</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)  <span class="hljs-comment"># super()调用父类（超类superclass）的方法</span><br>        self.battery_size = <span class="hljs-number">70</span>  <span class="hljs-comment"># 给子类定义新属性</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_battery</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 给子类定义新方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;this car has a &#x27;</span> + <span class="hljs-built_in">str</span>(self.battery_size) + <span class="hljs-string">&#x27;-kWh battery&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_gas_tank</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 重写父类的方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;this car doesn&#x27;t need a gas tank&quot;</span>)<br><br><br>my_tesla = ElectricCar(<span class="hljs-string">&#x27;tesla&#x27;</span>, <span class="hljs-string">&#x27;model s&#x27;</span>, <span class="hljs-number">2016</span>)<br><span class="hljs-built_in">print</span>(my_tesla.description())<br>my_tesla.read_battery()<br>my_tesla.fill_gas_tank()<br><br><span class="hljs-comment"># 导入类</span><br><span class="hljs-comment"># 从一个模块中导入多个类：from module_name import class_name1, class_name2, ......</span><br><span class="hljs-comment"># 导入整个模块：import module_name（使用时要指定module_name.class_name()）</span><br><span class="hljs-comment"># 导入模块中所有类：from module_name import *（尽量不要用）</span><br><span class="hljs-comment"># 在一个模块中导入另一个模块：from module_name import class_name</span><br><br><span class="hljs-comment"># Python 标准库</span><br><span class="hljs-comment"># 哈哈，Python3.6后字典有序了，不需要from collections import OrderedDict了</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;</p><p><code>ch9_1.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Car类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        self.make = make<br>        self.model = model<br>        self.year = year<br>        self.odometer = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 给属性指定默认值</span><br>        <span class="hljs-comment"># 类中的每个属性都必须有初始值，要么在创建实例时提供，要么在构造函数中设置默认值</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">description</span>(<span class="hljs-params">self</span>):<br>        long_name = <span class="hljs-built_in">str</span>(self.year) + <span class="hljs-string">&#x27; &#x27;</span> + self.make + <span class="hljs-string">&#x27; &#x27;</span> + self.model<br>        <span class="hljs-keyword">return</span> long_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_odometer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;this car has &#x27;</span> + <span class="hljs-built_in">str</span>(self.odometer) + <span class="hljs-string">&#x27; miles on it&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_odometer</span>(<span class="hljs-params">self, mileage</span>):<br>        <span class="hljs-keyword">if</span> mileage &gt;= self.odometer:  <span class="hljs-comment"># 里程表不能往回拨</span><br>            self.odometer = mileage<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;can not roll back&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">increase_odometer</span>(<span class="hljs-params">self, miles</span>):<br>        <span class="hljs-keyword">if</span> miles &gt;= <span class="hljs-number">0</span>:  <span class="hljs-comment"># 里程表不能往回拨</span><br>            self.odometer += miles<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;can not roll back&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_gas_tank</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># 将实例用作属性</span><br><span class="hljs-comment"># 在不断给ElectricCar类添加细节时，其中可能会包含很多专门针对汽车电瓶的属性和方法，</span><br><span class="hljs-comment"># 所以我们可以将这些属性和方法提取出来，放到另一个名为Battery的类中，</span><br><span class="hljs-comment"># 并将一个Battery实例用作ElectricCar类的一个属性</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Battery</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, battery_size=<span class="hljs-number">70</span></span>):<br>        self.battery_size = battery_size<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_battery</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;this car has a &#x27;</span> + <span class="hljs-built_in">str</span>(self.battery_size) + <span class="hljs-string">&#x27;-kWh battery&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_range</span>(<span class="hljs-params">self</span>):<br>        drive_range = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">if</span> self.battery_size == <span class="hljs-number">70</span>:<br>            drive_range = <span class="hljs-number">240</span><br>        <span class="hljs-keyword">elif</span> self.battery_size == <span class="hljs-number">85</span>:<br>            drive_range = <span class="hljs-number">270</span><br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;this car can go approximately &#x27;</span> + <span class="hljs-built_in">str</span>(drive_range) + <span class="hljs-string">&#x27; miles on a full charge&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>):  <span class="hljs-comment"># 指定父类Car</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)  <span class="hljs-comment"># super()调用父类（超类superclass）的方法</span><br>        self.battery = Battery()<br><br><br>my_tesla = ElectricCar(<span class="hljs-string">&#x27;tesla&#x27;</span>, <span class="hljs-string">&#x27;model s&#x27;</span>, <span class="hljs-number">2016</span>)<br><span class="hljs-built_in">print</span>(my_tesla.description())<br>my_tesla.battery.read_battery()<br>my_tesla.battery.get_range()<br></code></pre></td></tr></table></figure><p>&amp;emsp;</p><p><code>ch10.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 文件和异常</span><br><span class="hljs-comment"># 函数open()返回一个表示文件的对象，Python将这个对象存储在我们将在后面使用的变量中</span><br><span class="hljs-comment"># 关键字with在不再需要访问文件后将其关闭，不需要调用close()</span><br><span class="hljs-comment"># 尽量不要单独使用open()和close()，而是用with open()代替</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pi_digits.txt&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>    <span class="hljs-comment"># read()读取文件的全部内容，并将其作为一个字符串存储在变量中</span><br>    contents = file_object.read()<br>    <span class="hljs-built_in">print</span>(contents.rstrip())  <span class="hljs-comment"># 使用rstrip()删除空行</span><br><br><span class="hljs-comment"># Python在Windows系统中表示文件路径，一是可以直接使用斜杠（/），比如&#x27;./test/1pi_digits.txt&#x27;</span><br><span class="hljs-comment"># 二是使用反斜杠（\）并在字符串前加r声明此字符串不要转义，</span><br><span class="hljs-comment"># 比如r&#x27;C:\Users\Administrator\Documents\GitHub\python-book\test\1pi_digits.txt&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./test/1pi_digits.txt&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>    <span class="hljs-built_in">print</span>(file_object.read().rstrip())<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;C:\Users\Administrator\Documents\GitHub\python-book\test\1pi_digits.txt&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>    <span class="hljs-built_in">print</span>(file_object.read().rstrip())<br><br><span class="hljs-comment"># 逐行读取</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pi_digits.txt&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file_object:<br>        <span class="hljs-built_in">print</span>(line.rstrip())<br><br><span class="hljs-comment"># 创建一个包含文件各行内容的列表</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pi_digits.txt&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>    lines = file_object.readlines()<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    <span class="hljs-built_in">print</span>(line.rstrip())<br><br><span class="hljs-comment"># 使用文件的内容</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pi_digits.txt&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>    lines = file_object.readlines()<br><br>pi_string = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    pi_string += line.strip()<br><br><span class="hljs-built_in">print</span>(pi_string)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(pi_string))<br><br><span class="hljs-comment"># 包含一百万位的大型文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pi_million_digits.txt&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>    lines = file_object.readlines()<br><br>pi_string = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    pi_string += line.strip()<br><br><span class="hljs-built_in">print</span>(pi_string[:<span class="hljs-number">52</span>] + <span class="hljs-string">&#x27;...&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(pi_string))<br><br><span class="hljs-comment"># 圆周率中包含你的生日吗</span><br>birthday = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;please enter your birthday, in the format of yymmdd: &#x27;</span>)<br><span class="hljs-keyword">if</span> birthday <span class="hljs-keyword">in</span> pi_string:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;appear!&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;not appear!&#x27;</span>)<br><br><span class="hljs-comment"># 写入空文件</span><br><span class="hljs-comment"># 默认模式r（只读），全部模式参数：https://www.runoob.com/python3/python3-file-methods.html</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;programming.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>    file_object.write(<span class="hljs-string">&#x27;I love programming.\n&#x27;</span>)<br>    file_object.write(<span class="hljs-string">&#x27;I love creating new games.\n&#x27;</span>)<br><br><span class="hljs-comment"># 异常</span><br><span class="hljs-comment"># 处理ZeroDivisionError异常</span><br><span class="hljs-comment"># print(5/0)</span><br><span class="hljs-comment"># 使用try-except代码块</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">5</span> / <span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;can&#x27;t divide by zero&quot;</span>)<br><br><span class="hljs-comment"># else代码块</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Give me two numbers, and I&#x27;ll divide them.&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter &#x27;q&#x27; to quit.&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    first_number = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;First number: &quot;</span>)<br>    <span class="hljs-keyword">if</span> first_number == <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    second_number = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Second number: &quot;</span>)<br>    <span class="hljs-keyword">if</span> second_number == <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">try</span>:<br>        answer = <span class="hljs-built_in">int</span>(first_number) / <span class="hljs-built_in">int</span>(second_number)<br>    <span class="hljs-keyword">except</span> ZeroDivisionError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You can&#x27;t divide by 0!&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(answer)<br><br><span class="hljs-comment"># 处理FileNotFoundError异常</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">with open(&#x27;alice.txt&#x27;) as f_obj:</span><br><span class="hljs-string">    contents = f_obj.read()</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 分析文本 &amp; 使用多个文件</span><br>title = <span class="hljs-string">&quot;Alice&#x27;s Adventures in Wonderland&quot;</span><br><span class="hljs-built_in">print</span>(title.split())<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_words</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f_obj:<br>            contents = f_obj.read()<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sorry, the file &quot;</span> + filename + <span class="hljs-string">&quot; doesn&#x27;t exist&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        words = contents.split()<br>        num_words = <span class="hljs-built_in">len</span>(words)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the file &quot;</span> + filename + <span class="hljs-string">&quot; has about &quot;</span> + <span class="hljs-built_in">str</span>(num_words) + <span class="hljs-string">&quot; words&quot;</span>)<br><br><br>filename = <span class="hljs-string">&#x27;alice.txt&#x27;</span><br>count_words(filename)<br><br>filenames = [<span class="hljs-string">&#x27;alice.txt&#x27;</span>, <span class="hljs-string">&#x27;siddhartha.txt&#x27;</span>, <span class="hljs-string">&#x27;moby_dict.txt&#x27;</span>, <span class="hljs-string">&#x27;little_women.txt&#x27;</span>]<br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>    count_words(filename)<br><br><span class="hljs-comment"># 存储数据</span><br><span class="hljs-comment"># JSON数据格式并非Python专用，这让你能够将以JSON格式存储的数据与使用其他编程语言的人分享，是一种轻便格式</span><br><span class="hljs-comment"># JSON（JavaScript Object Notation）格式最初是为JavaScript开发的，但随后成为了一种常见格式，被包括Python在内的众多语言所采用</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">import json</span><br><span class="hljs-string"></span><br><span class="hljs-string">numbers = [2, 3, 5, 7, 11, 13]</span><br><span class="hljs-string">filename = &#x27;numbers.json&#x27;</span><br><span class="hljs-string">with open(filename, &#x27;w&#x27;) as f_obj:</span><br><span class="hljs-string">    json.dump(numbers, f_obj)  # json.dump()写入数据</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> json<br><br>filename = <span class="hljs-string">&#x27;numbers.json&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f_obj:<br>    numbers = json.load(f_obj)  <span class="hljs-comment"># json.load()读取数据</span><br><span class="hljs-built_in">print</span>(numbers)<br><br><span class="hljs-comment"># 保存和读取用户生成的数据</span><br><span class="hljs-keyword">import</span> json<br><br>filename = <span class="hljs-string">&#x27;username.json&#x27;</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f_obj:<br>        username = json.load(f_obj)<br><span class="hljs-keyword">except</span> FileNotFoundError:<br>    username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;what is your name? &#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f_obj:<br>        json.dump(username, f_obj)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;we will remember you when you come back, &#x27;</span> + username + <span class="hljs-string">&#x27;!&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;welcome back, &#x27;</span> + username + <span class="hljs-string">&#x27;!&#x27;</span>)<br><br><span class="hljs-comment"># 重构</span><br><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_stored_username</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;Get stored username if available.&quot;&quot;&quot;</span><br>    filename = <span class="hljs-string">&#x27;username.json&#x27;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f_obj:<br>            username = json.load(f_obj)<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> username<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_new_username</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;Prompt for a new username.&quot;&quot;&quot;</span><br>    username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;What is your name? &quot;</span>)<br>    filename = <span class="hljs-string">&#x27;username.json&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f_obj:<br>        json.dump(username, f_obj)<br>    <span class="hljs-keyword">return</span> username<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet_user</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;Greet the user by name.&quot;&quot;&quot;</span><br>    username = get_stored_username()<br>    <span class="hljs-keyword">if</span> username:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome back, &quot;</span> + username + <span class="hljs-string">&quot;!&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        username = get_new_username()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="hljs-string">&quot;!&quot;</span>)<br><br><br>greet_user()<br></code></pre></td></tr></table></figure><p>&amp;emsp;</p><p><code>ch11.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试代码</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;</p><p><code>project2.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据可视化</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>squares = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br>plt.plot(squares)  <span class="hljs-comment"># plot()绘制图形</span><br>plt.show()  <span class="hljs-comment"># show()打开matplotlib查看器，并显示绘制的图形</span><br></code></pre></td></tr></table></figure><p>&amp;emsp;</p><p>相关代码下载：<a href="https://qcym.lanzout.com/iN3DUy2c8ta">https://qcym.lanzout.com/iN3DUy2c8ta</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java 自学笔记</title>
    <link href="/2021/12/09/2021-12-09-self-learn-java/"/>
    <url>/2021/12/09/2021-12-09-self-learn-java/</url>
    
    <content type="html"><![CDATA[<p>&amp;emsp;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> lin.demo;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Java是面向对象的语言，一个程序的基本单位就是`class`。</span><br><span class="hljs-comment">不写`public`，也能正确编译，但是这个类将无法从命令行执行。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">类名要求：</span><br><span class="hljs-comment">- 类名必须以英文字母开头，后接字母、数字和下划线的组合</span><br><span class="hljs-comment">- 习惯以大写字母开头</span><br><span class="hljs-comment">方法名也有命名规则，命名和`class`一样，但是首字母小写。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Java定义了以下几种基本数据类型：</span><br><span class="hljs-comment">- 整数类型：byte，short，int，long</span><br><span class="hljs-comment">- 浮点数类型：float，double</span><br><span class="hljs-comment">- 字符类型：char</span><br><span class="hljs-comment">- 布尔类型：boolean</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">各种整型能表示的最大范围如下：</span><br><span class="hljs-comment">- byte：-128 ~ 127</span><br><span class="hljs-comment">- short: -32768 ~ 32767</span><br><span class="hljs-comment">- int: -2147483648 ~ 2147483647</span><br><span class="hljs-comment">- long: -9223372036854775808 ~ 9223372036854775807</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">2_000_000_000</span>; <span class="hljs-comment">// 加下划线更容易识别</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> <span class="hljs-number">0xff0000</span>; <span class="hljs-comment">// 十六进制表示的16711680</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i5</span> <span class="hljs-operator">=</span> <span class="hljs-number">0b1000000000</span>; <span class="hljs-comment">// 二进制表示的512</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">9000000000000000000L</span>; <span class="hljs-comment">// long型的结尾需要加L</span><br>        System.out.println(i3);<br>        System.out.println(i4);<br>        System.out.println(i5);<br>        System.out.println(l);<br>        <span class="hljs-comment">// 特别注意：同一个数的不同进制的表示是完全相同的，例如15=0xf=0b1111。</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        浮点数：因为小数用科学计数法表示时，小数点是可以“浮动”的，</span><br><span class="hljs-comment">        比如1234.5可以表示成12.345x10^2，也可以表示成1.2345x10^3，所以称为浮点数。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14f</span>; <span class="hljs-comment">// 对于float类型，需要加上f后缀</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14e38f</span>; <span class="hljs-comment">// 科学计数法表示的3.14x10^38</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.79e308</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1.79e308</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> <span class="hljs-number">4.9e-324</span>; <span class="hljs-comment">// 科学计数法表示的4.9x10^-324</span><br>        System.out.println(f1);<br>        System.out.println(f2);<br>        System.out.println(d1);<br>        System.out.println(d2);<br>        System.out.println(d3);<br><br>        <span class="hljs-comment">// 字符类型char表示一个字符。Java的char类型除了可以表示标准的ASCII外，还可以表示一个Unicode字符。</span><br>        <span class="hljs-comment">// 注意char类型使用单引号&#x27;，且仅有一个字符，要和双引号&quot;的字符串类型区分开。</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">zh</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;中&#x27;</span>;<br>        System.out.println(a);<br>        System.out.println(zh);<br><br>        <span class="hljs-comment">// 除了上述基本类型的变量，剩下的都是引用类型。例如，引用类型最常用的就是String字符串。</span><br>        <span class="hljs-comment">// 引用类型的变量类似于C语言的指针，它内部存储一个“地址”，指向某个对象在内存的位置。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        System.out.println(s);<br><br>        <span class="hljs-comment">// 定义变量时，如果加上final修饰符，这个变量就变成了常量。</span><br>        <span class="hljs-comment">// 根据习惯，常量名通常全部大写。</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14</span>; <span class="hljs-comment">// PI是一个常量</span><br><br>        <span class="hljs-comment">// var关键字：省略变量类型，直接用var，编译器会根据赋值语句自动推断出变量的类型</span><br>        <span class="hljs-comment">// 个人感觉，有时可能会有用</span><br><br>        <span class="hljs-comment">// 定义变量时，要遵循作用域最小化原则，尽量将变量定义在尽可能小的作用域，并且，不要重复使用变量名。</span><br><br>        <span class="hljs-comment">// 两个整数相除只能得到结果的整数部分</span><br>        <span class="hljs-comment">// 要得到余数，使用求余运算%</span><br><br>        <span class="hljs-comment">// 简洁的运算符：+=,-=,*=,/=,++,--</span><br>        <span class="hljs-comment">// ++n表示先加1再引用n，n++表示先引用n再加1。</span><br><br>        <span class="hljs-comment">// 移位运算（用的较少，暂时不看）</span><br><br>        <span class="hljs-comment">// 位运算：&amp;与，|或，~非，^异或（不同为1，否则为0）</span><br>        <span class="hljs-comment">// 对两个整数进行位运算，实际上就是按位对齐，然后依次对每一位进行运算。</span><br><br><br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 注释</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">注释1</span><br><span class="hljs-comment">注释2</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">OuterClass</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">myInnerMethod</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> x;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">OuterClass</span> <span class="hljs-variable">myOuter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OuterClass</span>();<br>        OuterClass.<span class="hljs-type">InnerClass</span> <span class="hljs-variable">myInner</span> <span class="hljs-operator">=</span> myOuter.<span class="hljs-keyword">new</span> <span class="hljs-title class_">InnerClass</span>();<br>        System.out.println(myInner.myInnerMethod());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 枚举 enum</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">一个类可以包含以下类型的变量：</span><br><span class="hljs-comment">- 局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</span><br><span class="hljs-comment">- 成员变量：成员变量是定义在类中、方法体之外的变量。这种变量在创建对象时实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</span><br><span class="hljs-comment">- 类变量：类变量也声明在类中、方法体之外，但必须声明为 static 类型。</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ 自学笔记</title>
    <link href="/2021/12/08/2021-12-08-self-learn-cpp/"/>
    <url>/2021/12/08/2021-12-08-self-learn-cpp/</url>
    
    <content type="html"><![CDATA[<p>&amp;emsp;</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p><img src="/img/2021-12-08-self-learn-cpp/1.png"></p><h1 id="typedef（给类型取别名）"><a href="#typedef（给类型取别名）" class="headerlink" title="typedef（给类型取别名）"></a><code>typedef</code>（给类型取别名）</h1><p><img src="/img/2021-12-08-self-learn-cpp/2.png"></p><h1 id="枚举类型（enum）"><a href="#枚举类型（enum）" class="headerlink" title="枚举类型（enum）"></a>枚举类型（enum）</h1><p><img src="/img/2021-12-08-self-learn-cpp/3.png"></p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ol><li>变量先声明（指定类型和名字），再定义（指定初始值）。</li><li>变量作用域：<ul><li>在函数或一个代码块内部声明的变量，称为局部变量。</li><li>在函数参数的定义中声明的变量，称为形式参数。</li><li>在所有函数外部声明的变量，称为全局变量。</li></ul></li><li>不应该把 <code>true</code> 的值看成 <code>1</code>，把 <code>false</code> 的值看成 <code>0</code>。</li></ol><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>定义常量（一般用大写字母表示）：</p><ul><li>使用 <code>#define</code> 预处理器：<code>#define LENGTH 10</code>（仅仅是简单的替换）</li><li>使用 <code>const</code> 关键字：<code>const int LENGTH = 10;</code>（<code>const</code> 类型的对象在程序执行期间不能被修改）</li></ul><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><ol><li><code>static</code> 关键字：<ul><li>当 <code>static</code> 修饰局部变量时，可以在程序的生命周期内保持局部变量的存在，而不需要在每次进入和离开作用域时对它进行创建和销毁。因此，使用 <code>static</code> 修饰函数中的局部变量可以在不断地调用这个函数之间保持这个局部变量的值。</li><li>当 <code>static</code> 修饰全局变量时，会使变量的作用域限制在声明它的文件内，这样就可以在不同的文件里定义同名的全局变量了。</li></ul></li><li><code>extern</code> 关键字：<ul><li>提供一个全局变量的引用，全局变量对所有文件都是可见的。</li><li>当有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <code>extern</code> 来得到已定义的变量或函数的引用。即，<code>extern</code> 用来在另一个文件中声明一个全局变量或函数。</li><li>用于当有多个文件共享相同的全局变量或函数时。</li></ul></li></ol><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ol><li>取模运算符（<code>%</code>）：得到整除后的余数。</li><li>逻辑运算符：<ul><li>逻辑与（<code>&amp;&amp;</code>）</li><li>逻辑或（<code>||</code>）</li><li>逻辑非（<code>!</code>）</li></ul></li><li>杂项运算符：<ul><li><code>sizeof()</code>：获取各种数据类型的大小。</li><li>条件运算符（<code>? :</code>）：<code>Exp1 ? Exp2 : Exp3;</code>（如果 Exp1 为真，则计算 Exp2 的值；如果 Exp1 为假，则计算 Exp3 的值。）</li><li>成员运算符（<code>.</code>【点】 和 <code>-&gt;</code>【箭头】）：直接访问成员时，使用点运算符；通过指针访问成员时，使用箭头运算符。   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">strcpy</span>(emp.first_name, <span class="hljs-string">&quot;zara&quot;</span>);<br><span class="hljs-built_in">strcpy</span>(p_emp-&gt;first_name, <span class="hljs-string">&quot;zara&quot;</span>);<br></code></pre></td></tr></table></figure></li><li>强制转换运算符：<code>(type) expression</code></li><li>指针运算符：<ul><li>取地址运算符（<code>&amp;</code>）：返回操作数的内存地址。</li><li>间接寻址运算符（<code>*</code>）：返回操作数所指定地址的变量的值。<blockquote><p>调用时变量前加<code>&amp;</code>：返回该变量的地址。</p><p>声明时变量前加<code>类型*</code>：该指针变量表示另一个普通变量的地址（<code>int* a;</code>）。</p><p>调用时变量前加<code>*</code>：表示取该地址的内容。</p><p>声明时变量前加<code>类型**</code>：该二级指针变量表示另一个一级<code>类型*</code>指针变量的地址。（<code>int** a;</code>）</p></blockquote></li></ul></li></ul></li></ol><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><ol><li>基于范围的 <code>for</code> 循环（C++11）：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> my_array[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br><br><span class="hljs-comment">// 不会改变 my_array 数组中元素的值</span><br><span class="hljs-comment">// x 将使用 my_array 数组的副本</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : my_array)<br>&#123;<br>   x *= <span class="hljs-number">2</span>;<br>   cout &lt;&lt; x &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// 会改变 my_array 数组中元素的值</span><br><span class="hljs-comment">// 符号 &amp; 表示 x 是一个引用变量，将使用 my_array 数组的原始数据</span><br><span class="hljs-comment">// 引用是已定义的变量的别名</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>&amp; x : my_array)<br>&#123;<br>   x *= <span class="hljs-number">2</span>;<br>   cout &lt;&lt; x &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// 还可直接使用初始化列表</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;)<br>&#123;<br>   x *= <span class="hljs-number">2</span>;<br>   cout &lt;&lt; x &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>无限循环：<ul><li><code>while (true)</code></li><li><code>for ( ; ; )</code></li></ul></li></ol><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ol><li>数组名是指向数组中第一个元素的常量指针。</li><li>可以通过指定不带索引的数组名来传递一个指向数组的指针。传递数组给一个函数，数组类型自动转换为指针类型，因此传递的实际是地址。</li><li>不允许返回一个完整的数组作为函数的参数。但是，可以通过指定不带索引的数组名来返回一个指向数组的指针。</li><li>不支持在函数外返回局部变量的地址，除非在函数内定义局部变量为 <code>static</code> 变量。</li></ol><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><ol><li>C 风格字符串：<ul><li>字符串实际上是使用 <code>null</code> 字符 <code>&#39;\0&#39;</code> 终止的一维字符数组。 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span> greeting[<span class="hljs-number">6</span>] = &#123;<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-type">char</span> greeting[] = <span class="hljs-string">&quot;Hello&quot;</span>;<br></code></pre></td></tr></table></figure></li><li>其实，不需要把 <code>null</code> 字符放在字符串常量的末尾。编译器在初始化数组时，会自动把 <code>&#39;\0&#39;</code> 放在字符串的末尾。</li></ul></li><li>C++ 中的 string 类</li></ol><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><ol><li><p>使用指针：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> var = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span>* ip; <span class="hljs-comment">// 定义一个指针变量</span><br>ip = &amp;var; <span class="hljs-comment">// 把变量地址赋值给指针</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;Value of *ip variable: &quot;</span>;<br>cout &lt;&lt; *ip &lt;&lt; endl; <span class="hljs-comment">// 访问指针变量中可用地址的值</span><br></code></pre></td></tr></table></figure></li><li><p>空指针：<code>int* ptr = NULL;</code></p></li><li><p>使用指针操作数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> var[MAX] = &#123; <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span> &#125;;<br><span class="hljs-type">int</span>* ptr = var; <span class="hljs-comment">// var 是一个指向数组开头的常量，不能直接 var++</span><br><br><span class="hljs-keyword">while</span> (ptr &lt;= &amp;var[MAX - <span class="hljs-number">1</span>]) <span class="hljs-comment">// 指针的比较</span><br>&#123;<br>   cout &lt;&lt; *ptr &lt;&lt; endl;<br>   ptr++; <span class="hljs-comment">// 递增一个指针</span><br>&#125;<br><br>*(var + <span class="hljs-number">2</span>) = <span class="hljs-number">10000</span>;<br>cout &lt;&lt; var[<span class="hljs-number">2</span>] &lt;&lt; endl;<br></code></pre></td></tr></table></figure></li><li><p>指针数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">4</span>;<br><br><span class="hljs-comment">// 用一个指向字符的指针数组来存储一个字符串列表</span><br><span class="hljs-comment">// 指针数组的每个元素存储的是每个字符串数组的首字母的地址</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* names[MAX] = &#123;<br>            <span class="hljs-string">&quot;Zara Ali&quot;</span>,<br>            <span class="hljs-string">&quot;Hina Ali&quot;</span>,<br>            <span class="hljs-string">&quot;Nuha Ali&quot;</span>,<br>            <span class="hljs-string">&quot;Sara Ali&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX; i++)<br>&#123;<br>   cout &lt;&lt; &amp;names[i] &lt;&lt; endl; <span class="hljs-comment">// 地址是连续的（相差4）</span><br>   cout &lt;&lt; <span class="hljs-string">&quot;Value of names[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;] = &quot;</span>;<br>   cout &lt;&lt; names[i] &lt;&lt; endl; <span class="hljs-comment">// 整个字符串数组</span><br>   cout &lt;&lt; names[i][<span class="hljs-number">0</span>] &lt;&lt; endl; <span class="hljs-comment">// 字符串数组的首字母</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>指向指针的指针（多级间接寻址）：</p><p>当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针指向包含实际值的位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> var = <span class="hljs-number">123</span>;<br><span class="hljs-type">int</span>* ptr = &amp;var;<br><span class="hljs-type">int</span>** pptr = &amp;ptr;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;var值为:&quot;</span> &lt;&lt; var &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*ptr值为:&quot;</span> &lt;&lt; *ptr &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;**pptr值为:&quot;</span> &lt;&lt; **pptr &lt;&lt; endl;<br></code></pre></td></tr></table></figure></li><li><p>传递指针给函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getAverage</span><span class="hljs-params">(<span class="hljs-type">int</span>* arr, <span class="hljs-type">int</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>   &#123;<br>      sum += arr[i];<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">double</span>(sum) / size;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">int</span> balance[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> &#125;;<br>   cout &lt;&lt; <span class="hljs-string">&quot;Average value is:&quot;</span> &lt;&lt; <span class="hljs-built_in">getAverage</span>(balance, <span class="hljs-number">4</span>) &lt;&lt; endl;<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>从函数返回指针：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">getRandom</span><span class="hljs-params">()</span> <span class="hljs-comment">// 生成和返回随机数的函数</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">static</span> <span class="hljs-type">int</span> r[<span class="hljs-number">10</span>]; <span class="hljs-comment">// C++不支持在函数外返回局部变量的地址，除非定义局部变量为static变量。</span><br><br>   <span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>)); <span class="hljs-comment">// 设置种子</span><br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>   &#123;<br>      r[i] = <span class="hljs-built_in">rand</span>();<br>      cout &lt;&lt; r[i] &lt;&lt; endl;<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">int</span>* p = <span class="hljs-built_in">getRandom</span>();<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>   &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;*(p+&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;):&quot;</span>;<br>      cout &lt;&lt; *(p + i) &lt;&lt; endl;<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol><li><p>引用和指针的区别：</p><ul><li>不存在空引用。引用必须连接到一块合法的内存。</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li><li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li></ul></li><li><p>创建引用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> i = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>&amp; r = i;<br></code></pre></td></tr></table></figure></li><li><p>把引用作为函数参数：</p><p>比传一般的参数更安全。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; x, <span class="hljs-type">int</span>&amp; y)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">int</span> temp;<br>   temp = x;<br>   x = y;<br>   y = temp;<br><br>   <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;<br>   <span class="hljs-type">int</span> b = <span class="hljs-number">200</span>;<br><br>   cout &lt;&lt; a &lt;&lt; endl;<br>   cout &lt;&lt; b &lt;&lt; endl;<br><br>   <span class="hljs-built_in">swap</span>(a, b);<br><br>   cout &lt;&lt; a &lt;&lt; endl;<br>   cout &lt;&lt; b &lt;&lt; endl;<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>把引用作为函数返回值：</p><p>通过使用引用来替代指针，会使 C++ 程序更容易阅读和维护。C++ 函数可以返回一个引用，方式与返回一个指针类似。</p><p>当函数返回一个引用时，则返回一个指向返回值的隐式指针。这样，函数就可以放在赋值语句的左边。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">double</span> vals[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">10.1</span>, <span class="hljs-number">12.6</span>, <span class="hljs-number">33.1</span>, <span class="hljs-number">24.1</span>, <span class="hljs-number">50.0</span> &#125;;<br><br><span class="hljs-function"><span class="hljs-type">double</span>&amp; <span class="hljs-title">setValues</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">return</span> vals[i];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>   &#123;<br>      cout &lt;&lt; vals[i] &lt;&lt; endl;<br>   &#125;<br><br>   <span class="hljs-comment">// 当函数返回一个引用时，则返回一个指向返回值的隐式指针。这样，函数就可以放在赋值语句的左边。</span><br>   <span class="hljs-built_in">setValues</span>(<span class="hljs-number">1</span>) = <span class="hljs-number">20.23</span>;<br>   <span class="hljs-built_in">setValues</span>(<span class="hljs-number">3</span>) = <span class="hljs-number">70.8</span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>   &#123;<br>      cout &lt;&lt; vals[i] &lt;&lt; endl;<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><ol><li>定义结构体：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Books</span> <span class="hljs-comment">// 结构体类型的名称</span><br>&#123;<br>   <span class="hljs-type">char</span> title[<span class="hljs-number">50</span>];<br>   <span class="hljs-type">char</span> author[<span class="hljs-number">50</span>];<br>   <span class="hljs-type">char</span> subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-type">int</span> book_id;<br>&#125; book; <span class="hljs-comment">// 可以指定一个或多个结构变量，这是可选的。</span><br></code></pre></td></tr></table></figure></li><li>访问结构成员：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Books</span><br>&#123;<br>   <span class="hljs-type">char</span> title[<span class="hljs-number">50</span>];<br>   <span class="hljs-type">char</span> author[<span class="hljs-number">50</span>];<br>   <span class="hljs-type">char</span> subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-type">int</span> book_id;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   Books Book1;<br>   Books Book2;<br><br>   <span class="hljs-comment">// Book1 详述</span><br>   <span class="hljs-built_in">strcpy_s</span>(Book1.title, <span class="hljs-string">&quot;C++ 教程&quot;</span>);<br>   <span class="hljs-built_in">strcpy_s</span>(Book1.author, <span class="hljs-string">&quot;Runoob&quot;</span>);<br>   <span class="hljs-built_in">strcpy_s</span>(Book1.subject, <span class="hljs-string">&quot;编程语言&quot;</span>);<br>   Book1.book_id = <span class="hljs-number">12345</span>;<br><br>   <span class="hljs-comment">// Book2 详述</span><br>   <span class="hljs-built_in">strcpy_s</span>(Book2.title, <span class="hljs-string">&quot;CSS 教程&quot;</span>);<br>   <span class="hljs-built_in">strcpy_s</span>(Book2.author, <span class="hljs-string">&quot;Runoob&quot;</span>);<br>   <span class="hljs-built_in">strcpy_s</span>(Book2.subject, <span class="hljs-string">&quot;前端技术&quot;</span>);<br>   Book2.book_id = <span class="hljs-number">12346</span>;<br><br>   <span class="hljs-comment">// 输出 Book1 信息</span><br>   cout &lt;&lt; <span class="hljs-string">&quot;第一本书标题 : &quot;</span> &lt;&lt; Book1.title &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;第一本书作者 : &quot;</span> &lt;&lt; Book1.author &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;第一本书类目 : &quot;</span> &lt;&lt; Book1.subject &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;第一本书 ID : &quot;</span> &lt;&lt; Book1.book_id &lt;&lt; endl;<br><br>   <span class="hljs-comment">// 输出 Book2 信息</span><br>   cout &lt;&lt; <span class="hljs-string">&quot;第二本书标题 : &quot;</span> &lt;&lt; Book2.title &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;第二本书作者 : &quot;</span> &lt;&lt; Book2.author &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;第二本书类目 : &quot;</span> &lt;&lt; Book2.subject &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;第二本书 ID : &quot;</span> &lt;&lt; Book2.book_id &lt;&lt; endl;<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>结构体作为函数参数：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Books</span><br>&#123;<br>   <span class="hljs-type">char</span> title[<span class="hljs-number">50</span>];<br>   <span class="hljs-type">char</span> author[<span class="hljs-number">50</span>];<br>   <span class="hljs-type">char</span> subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-type">int</span> book_id;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Books book)</span></span><br><span class="hljs-function"></span>&#123;<br>   cout &lt;&lt; <span class="hljs-string">&quot;书标题 : &quot;</span> &lt;&lt; book.title &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;书作者 : &quot;</span> &lt;&lt; book.author &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;书类目 : &quot;</span> &lt;&lt; book.subject &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;书 ID : &quot;</span> &lt;&lt; book.book_id &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   Books Book1;<br>   Books Book2;<br><br>   <span class="hljs-comment">// Book1 详述</span><br>   <span class="hljs-built_in">strcpy_s</span>(Book1.title, <span class="hljs-string">&quot;C++ 教程&quot;</span>);<br>   <span class="hljs-built_in">strcpy_s</span>(Book1.author, <span class="hljs-string">&quot;Runoob&quot;</span>);<br>   <span class="hljs-built_in">strcpy_s</span>(Book1.subject, <span class="hljs-string">&quot;编程语言&quot;</span>);<br>   Book1.book_id = <span class="hljs-number">12345</span>;<br><br>   <span class="hljs-comment">// Book2 详述</span><br>   <span class="hljs-built_in">strcpy_s</span>(Book2.title, <span class="hljs-string">&quot;CSS 教程&quot;</span>);<br>   <span class="hljs-built_in">strcpy_s</span>(Book2.author, <span class="hljs-string">&quot;Runoob&quot;</span>);<br>   <span class="hljs-built_in">strcpy_s</span>(Book2.subject, <span class="hljs-string">&quot;前端技术&quot;</span>);<br>   Book2.book_id = <span class="hljs-number">12346</span>;<br><br>   <span class="hljs-comment">// 输出 Book1 信息</span><br>   <span class="hljs-built_in">printBook</span>(Book1);<br><br>   <span class="hljs-comment">// 输出 Book2 信息</span><br>   <span class="hljs-built_in">printBook</span>(Book2);<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>指向结构的指针：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Books</span><br>&#123;<br>   <span class="hljs-type">char</span> title[<span class="hljs-number">50</span>];<br>   <span class="hljs-type">char</span> author[<span class="hljs-number">50</span>];<br>   <span class="hljs-type">char</span> subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-type">int</span> book_id;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Books* book)</span></span><br><span class="hljs-function"></span>&#123;<br>   cout &lt;&lt; <span class="hljs-string">&quot;书标题 : &quot;</span> &lt;&lt; book-&gt;title &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;书作者 : &quot;</span> &lt;&lt; book-&gt;author &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;书类目 : &quot;</span> &lt;&lt; book-&gt;subject &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;书 ID : &quot;</span> &lt;&lt; book-&gt;book_id &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   Books Book1;<br>   Books Book2;<br><br>   <span class="hljs-comment">// Book1 详述</span><br>   <span class="hljs-built_in">strcpy_s</span>(Book1.title, <span class="hljs-string">&quot;C++ 教程&quot;</span>);<br>   <span class="hljs-built_in">strcpy_s</span>(Book1.author, <span class="hljs-string">&quot;Runoob&quot;</span>);<br>   <span class="hljs-built_in">strcpy_s</span>(Book1.subject, <span class="hljs-string">&quot;编程语言&quot;</span>);<br>   Book1.book_id = <span class="hljs-number">12345</span>;<br><br>   <span class="hljs-comment">// Book2 详述</span><br>   <span class="hljs-built_in">strcpy_s</span>(Book2.title, <span class="hljs-string">&quot;CSS 教程&quot;</span>);<br>   <span class="hljs-built_in">strcpy_s</span>(Book2.author, <span class="hljs-string">&quot;Runoob&quot;</span>);<br>   <span class="hljs-built_in">strcpy_s</span>(Book2.subject, <span class="hljs-string">&quot;前端技术&quot;</span>);<br>   Book2.book_id = <span class="hljs-number">12346</span>;<br><br>   <span class="hljs-comment">// 通过传 Book1 的地址来输出 Book1 信息</span><br>   <span class="hljs-built_in">printBook</span>(&amp;Book1);<br><br>   <span class="hljs-comment">// 通过传 Book2 的地址来输出 Book2 信息</span><br>   <span class="hljs-built_in">printBook</span>(&amp;Book2);<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用 <code>typedef</code> 进行简化：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Books</span><br>&#123;<br>   <span class="hljs-type">char</span> title[<span class="hljs-number">50</span>];<br>   <span class="hljs-type">char</span> author[<span class="hljs-number">50</span>];<br>   <span class="hljs-type">char</span> subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-type">int</span> book_id;<br>&#125;Books;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">(Books* book)</span></span><br><span class="hljs-function"></span>&#123;<br>   cout &lt;&lt; <span class="hljs-string">&quot;书标题 : &quot;</span> &lt;&lt; book-&gt;title &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;书作者 : &quot;</span> &lt;&lt; book-&gt;author &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;书类目 : &quot;</span> &lt;&lt; book-&gt;subject &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;书 ID : &quot;</span> &lt;&lt; book-&gt;book_id &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>实习笔记</title>
    <link href="/2021/12/07/2021-12-07-practice-note/"/>
    <url>/2021/12/07/2021-12-07-practice-note/</url>
    
    <content type="html"><![CDATA[<p>&amp;emsp;</p><h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><p>Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者在网站中的所有动作流数据。</p><h1 id="change-stream"><a href="#change-stream" class="headerlink" title="change stream"></a>change stream</h1><p>在MongoDB3.6引入的新feature中，change stream无疑是非常吸引人的。</p><p>Change streams allow applications to access real-time data changes without the complexity and risk of tailing the oplog.</p><p>Change stream允许应用实时获取mongodb数据的变更，这是一个呼声很高的需求，可以用于ETL、跨平台数据同步、通知服务等。以前没有change stream时，也可以通过tail oplog来追踪修改，但这是复杂、危险的野路子。</p><h1 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h1><p>在电脑术语中，统一资源标识符（Uniform Resource Identifier，URI）是一个用于标识某一互联网资源名称的字符串。该种标识允许用户对任何（包括本地和互联网）的资源通过特定的协议进行交互操作。</p><p>Web上可用的每种资源（HTML文档、图像、视频片段、程序等）由一个通用资源标识符（Uniform Resource Identifier, 简称”URI”）进行定位。</p><h1 id="Java-阻塞队列"><a href="#Java-阻塞队列" class="headerlink" title="Java 阻塞队列"></a>Java 阻塞队列</h1><p>阻塞队列（BlockingQueue）是一个支持两个附加操作的队列。这两个附加的操作支持阻塞的插入和移除方法。</p><ul><li><p>支持阻塞的插入方法：意思是当队列满时，队列会阻塞插入元素的线程，直到队列不满。</p></li><li><p>支持阻塞的移除方法：意思是在队列为空时，获取元素的线程会等待队列变为非空</p></li></ul><p>阻塞队列常用于生产者和消费者的场景，生产者是向队列里添加元素的线程，消费者是从队列里取元素的线程。阻塞队列就是生产者用来存放元素、消费者用来获取元素的容器。</p><p>JDK7 提供了 7 个阻塞队列。分别是：</p><ul><li>ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列。</li><li>LinkedBlockingQueue：一个由链表结构组成的有界阻塞队列。</li><li>PriorityBlockingQueue：一个支持优先级排序的无界阻塞队列。</li><li>DelayQueue：一个使用优先级队列实现的无界阻塞队列。</li><li>SynchronousQueue：一个不存储元素的阻塞队列。</li><li>LinkedTransferQueue：一个由链表结构组成的无界阻塞队列。</li><li>LinkedBlockingDeque：一个由链表结构组成的双向阻塞队列。</li></ul><h1 id="Java-泛型"><a href="#Java-泛型" class="headerlink" title="Java 泛型"></a>Java 泛型</h1><p>泛型就是定义一种模板，例如<code>ArrayList&lt;T&gt;</code>，然后在代码中为用到的类创建对应的<code>ArrayList&lt;类型&gt;</code>。</p><p>泛型就是编写模板代码来适应任意类型。</p><p>泛型的好处是使用时不必对类型进行强制转换，它通过编译器对类型进行检查。</p><h1 id="Java-static-静态代码块"><a href="#Java-static-静态代码块" class="headerlink" title="Java static 静态代码块"></a>Java static 静态代码块</h1><ul><li>格式：static{}</li><li>用于初始化类，为类的属性初始化。</li><li>随着类的加载而加载，并且只加载一次。</li><li>静态代码块的执行优先于非静态代码块。</li><li>静态代码块中不能调用非静态成员。</li><li>静态代码块可以有多个，按依次向下的顺序执行。</li></ul><h1 id="Java-Properties-类"><a href="#Java-Properties-类" class="headerlink" title="Java Properties 类"></a>Java Properties 类</h1><p>Properties 继承于 Hashtable，表示一个持久的属性集，属性列表中每个键及其对应值都是一个字符串。</p><h1 id="一些数字"><a href="#一些数字" class="headerlink" title="一些数字"></a>一些数字</h1><p>67108864：64M</p><p>1048576：1M</p><h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><p>做个简单的比喻：进程&#x3D;火车，线程&#x3D;车厢</p><ul><li>线程在进程下行进（单纯的车厢无法运行）</li><li>一个进程可以包含多个线程（一辆火车可以有多个车厢）</li><li>不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）</li><li>同一进程下不同线程间数据很易共享（A车厢换到B车厢很容易）</li><li>进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源）</li><li>进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢）</li><li>进程可以拓展到多机，进程最多适合多核（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上）</li><li>进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。（比如火车上的洗手间）－”互斥锁”</li><li>进程使用的内存地址可以限定使用量（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）－“信号量”</li></ul><h1 id="Java-线程的优先级"><a href="#Java-线程的优先级" class="headerlink" title="Java 线程的优先级"></a>Java 线程的优先级</h1><p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。</p><p>Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。</p><p>默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。</p><p>具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。</p><h1 id="Java-创建一个线程"><a href="#Java-创建一个线程" class="headerlink" title="Java 创建一个线程"></a>Java 创建一个线程</h1><p>Java 提供了三种创建线程的方法：</p><ul><li>通过实现 Runnable 接口；</li><li>通过继承 Thread 类本身；</li><li>通过 Callable 和 Future 创建线程。</li></ul><h2 id="通过继承Thread来创建线程"><a href="#通过继承Thread来创建线程" class="headerlink" title="通过继承Thread来创建线程"></a>通过继承Thread来创建线程</h2><p>创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。</p><p>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。</p><p>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><ul><li>InterruptedException：一个线程被另一个线程中断，抛出该异常。</li><li>public void printStackTrace()：打印toString()结果和栈层次到System.err，即错误输出流。</li><li>NumberFormatException：当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</li><li>UnknownHostException</li><li>printStackTrace：在命令行中打印异常信息在程序中出错的位置及原因。</li></ul><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</p><p>在高负载的情况下，添加更多的节点，可以保证服务器性能。</p><p>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB 将数据存储为一个文档，数据结构由键值(key&#x3D;&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><h1 id="try、catch、finally"><a href="#try、catch、finally" class="headerlink" title="try、catch、finally"></a>try、catch、finally</h1><ul><li>不管有没有异常，finally中的代码都会执行</li><li>当try、catch中有return时，finally中的代码依然会继续执行</li><li>finally是在return后面的表达式运算之后执行的，此时并没有返回运算之后的值，而是把值保存起来，不管finally对该值做任何的改变，返回的值都不会改变，依然返回保存起来的值。也就是说方法的返回值是在finally运算之前就确定了的。</li><li>finally代码中最好不要包含return，程序会提前退出，也就是说返回的值不是try或catch中的值</li></ul><h1 id="Java-ArrayList"><a href="#Java-ArrayList" class="headerlink" title="Java ArrayList"></a>Java ArrayList</h1><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</p><h1 id="Java-Serializable-序列化"><a href="#Java-Serializable-序列化" class="headerlink" title="Java Serializable 序列化"></a>Java Serializable 序列化</h1><h2 id="什么是Serializable接口"><a href="#什么是Serializable接口" class="headerlink" title="什么是Serializable接口"></a>什么是Serializable接口</h2><p>一个对象序列化的接口，一个类只有实现了Serializable接口，它的对象才能被序列化。</p><h2 id="什么是序列化"><a href="#什么是序列化" class="headerlink" title="什么是序列化"></a>什么是序列化</h2><ul><li>把对象转换为字节序列的过程称为对象的序列化</li><li>把字节序列恢复为对象的过程称为对象的反序列化</li></ul><h2 id="为什么要序列化对象"><a href="#为什么要序列化对象" class="headerlink" title="为什么要序列化对象"></a>为什么要序列化对象</h2><p>序列化是将对象状态转换为可保持或传输的格式的过程。与序列化相对的是反序列化，它将流转换为对象。这两个过程结合起来，可以轻松地存储和传输数据。</p><h2 id="什么情况下需要序列化"><a href="#什么情况下需要序列化" class="headerlink" title="什么情况下需要序列化"></a>什么情况下需要序列化</h2><p>当我们需要把对象的状态信息通过网络进行传输，或者需要将对象的状态信息持久化，以便将来使用时都需要把对象进行序列化。</p><h1 id="fastjson-新手指南"><a href="#fastjson-新手指南" class="headerlink" title="fastjson 新手指南"></a>fastjson 新手指南</h1><h2 id="什么是fastjson"><a href="#什么是fastjson" class="headerlink" title="什么是fastjson?"></a>什么是fastjson?</h2><p>fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。</p><h2 id="fastjson的优点"><a href="#fastjson的优点" class="headerlink" title="fastjson的优点"></a>fastjson的优点</h2><h3 id="速度快"><a href="#速度快" class="headerlink" title="速度快"></a>速度快</h3><p>fastjson相对其他JSON库的特点是快，从2011年fastjson发布1.1.x版本之后，其性能从未被其他Java实现的JSON库超越。</p><h3 id="使用广泛"><a href="#使用广泛" class="headerlink" title="使用广泛"></a>使用广泛</h3><p>fastjson在阿里巴巴大规模使用，在数万台服务器上部署，fastjson在业界被广泛接受。在2012年被开源中国评选为最受欢迎的国产开源软件之一。</p><h3 id="测试完备"><a href="#测试完备" class="headerlink" title="测试完备"></a>测试完备</h3><p>fastjson有非常多的testcase，在1.2.11版本中，testcase超过3321个。每次发布都会进行回归测试，保证质量稳定。</p><h3 id="使用简单"><a href="#使用简单" class="headerlink" title="使用简单"></a>使用简单</h3><p>fastjson的API十分简洁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> JSON.toJSONString(obj); <span class="hljs-comment">//序列化</span><br><span class="hljs-type">VO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> JSON.parseObject(<span class="hljs-string">&quot;&#123;...&#125;&quot;</span>, VO.class); <span class="hljs-comment">//反序列化</span><br></code></pre></td></tr></table></figure><h3 id="功能完备"><a href="#功能完备" class="headerlink" title="功能完备"></a>功能完备</h3><p>支持泛型，支持流处理超大文本，支持枚举，支持序列化和反序列化扩展。</p><h1 id="scala-字符串插值"><a href="#scala-字符串插值" class="headerlink" title="scala 字符串插值"></a>scala 字符串插值</h1><p>Scala 提供了一种新的机制来根据数据生成字符串：字符串插值。字符串插值允许使用者将变量引用直接插入处理过的字面字符中。</p><p>Scala 提供了3种创新的字符串插值方法：s、f 和 raw。</p><h2 id="s-字符串插值器"><a href="#s-字符串插值器" class="headerlink" title="s 字符串插值器"></a>s 字符串插值器</h2><p>在任何字符串前加上s，就可以直接在串中使用变量了。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> name=<span class="hljs-string">&quot;James&quot;</span><br>println(<span class="hljs-string">s&quot;Hello,<span class="hljs-subst">$name</span>&quot;</span>) <span class="hljs-comment">// Hello,James</span><br></code></pre></td></tr></table></figure><p>字符串插值器也可以处理任意的表达式。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">println(<span class="hljs-string">s&quot;1+1=<span class="hljs-subst">$&#123;1+1&#125;</span>&quot;</span>) <span class="hljs-comment">// 1+1=2</span><br></code></pre></td></tr></table></figure><h1 id="scala-trait-特质"><a href="#scala-trait-特质" class="headerlink" title="scala trait 特质"></a>scala trait 特质</h1><p>特质(Traits)用于在类(Class)之间共享程序接口(Interface)和字段(Fields)。它们类似于Java 8的接口。类和对象(Objects)可以扩展特质，但是特质不能被实例化，因此特质没有参数。</p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>REmote DIctionary Server (Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p><p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p><h1 id="spark（计算引擎）"><a href="#spark（计算引擎）" class="headerlink" title="spark（计算引擎）"></a>spark（计算引擎）</h1><p>Apache Spark 是专为大规模数据处理而设计的快速通用的计算引擎。Spark是UC Berkeley AMP lab (加州大学伯克利分校的AMP实验室)所开源的类Hadoop MapReduce的通用并行框架，Spark，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是——Job中间输出结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的MapReduce的算法。</p><p>Spark 是在 Scala 语言中实现的，它将 Scala 用作其应用程序框架。与 Hadoop 不同，Spark 和 Scala 能够紧密集成，其中的 Scala 可以像操作本地集合对象一样轻松地操作分布式数据集。</p><h1 id="SparkConf-和-SparkContext"><a href="#SparkConf-和-SparkContext" class="headerlink" title="SparkConf 和 SparkContext"></a>SparkConf 和 SparkContext</h1><p>任何Spark程序都是SparkContext开始的，SparkContext的初始化需要一个SparkConf对象，SparkConf包含了Spark集群配置的各种参数。</p><p>初始化后，就可以使用SparkContext对象所包含的各种方法来创建和操作RDD和共享变量。</p><p>通过创建SparkConf对象来配置应用，然后基于这个SparkConf创建一个SparkContext对象。驱动器程序通过SparkContext对象来访问Spark。</p><p>这个对象代表对计算集群的一个连接。一旦有了SparkContext， 就可以用它来创建RDD。</p><h1 id="hive"><a href="#hive" class="headerlink" title="hive"></a>hive</h1><p>hive是基于Hadoop的一个数据仓库工具，用来进行数据提取、转化、加载，这是一种可以存储、查询和分析存储在Hadoop中的大规模数据的机制。hive数据仓库工具能将结构化的数据文件映射为一张数据库表，并提供SQL查询功能，能将SQL语句转变成MapReduce任务来执行。Hive的优点是学习成本低，可以通过类似SQL语句实现快速MapReduce统计，使MapReduce变得更加简单，而不必开发专门的MapReduce应用程序。hive十分适合对数据仓库进行统计分析。</p><h1 id="阿里巴巴-canal"><a href="#阿里巴巴-canal" class="headerlink" title="阿里巴巴 canal"></a>阿里巴巴 canal</h1><p>主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>医院排班</title>
    <link href="/2021/12/06/2021-12-06-hospital-arrange/"/>
    <url>/2021/12/06/2021-12-06-hospital-arrange/</url>
    
    <content type="html"><![CDATA[<p>&amp;emsp;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> n = <span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> a[n][<span class="hljs-number">7</span>];<br>string s1 = <span class="hljs-string">&quot;休息&quot;</span>;<br>string s2 = <span class="hljs-string">&quot;白班&quot;</span>;<br>string s3 = <span class="hljs-string">&quot;上夜&quot;</span>;<br>string s4 = <span class="hljs-string">&quot;下夜&quot;</span>;<br>string s[<span class="hljs-number">4</span>] = &#123; s1,s2,s3,s4 &#125;;<br><span class="hljs-type">int</span> i, j;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(<span class="hljs-type">int</span> a[n][<span class="hljs-number">7</span>])</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">arrange</span><span class="hljs-params">(<span class="hljs-type">int</span> a[n][<span class="hljs-number">7</span>])</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show0</span><span class="hljs-params">(<span class="hljs-type">int</span> a[n][<span class="hljs-number">7</span>])</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">int</span> a[n][<span class="hljs-number">7</span>])</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">initialize</span>(a);<br>cout &lt;&lt; <span class="hljs-string">&quot;每周排班表：&quot;</span> &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;固定：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">show0</span>(a);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;随机：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">arrange</span>(a);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(<span class="hljs-type">int</span> a[n][<span class="hljs-number">7</span>])</span>    <span class="hljs-comment">//初始化</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; ++i)    <span class="hljs-comment">//全部设置为白班</span><br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; ++j)<br>&#123;<br>a[i][j] = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; ++i)    <span class="hljs-comment">//上夜</span><br>&#123;<br>a[i][i] = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i)    <span class="hljs-comment">//下夜</span><br>&#123;<br>a[i + <span class="hljs-number">1</span>][i] = <span class="hljs-number">3</span>;<br>&#125;<br>a[<span class="hljs-number">0</span>][<span class="hljs-number">6</span>] = <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">//休息</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)<br>&#123;<br>a[i][i + <span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>a[i + <span class="hljs-number">1</span>][i + <span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>&#125;<br>a[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>] = a[<span class="hljs-number">6</span>][<span class="hljs-number">0</span>] = a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = a[<span class="hljs-number">6</span>][<span class="hljs-number">1</span>] = a[<span class="hljs-number">7</span>][<span class="hljs-number">5</span>] = a[<span class="hljs-number">7</span>][<span class="hljs-number">6</span>]=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">arrange</span><span class="hljs-params">(<span class="hljs-type">int</span> a[n][<span class="hljs-number">7</span>])</span>    <span class="hljs-comment">//安排</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x1 = <span class="hljs-number">0</span>; x1 &lt; <span class="hljs-number">7</span>; ++x1)<br>&#123;<br>a[<span class="hljs-number">8</span>][x1] = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x2 = x1 + <span class="hljs-number">1</span>; x2 &lt; <span class="hljs-number">7</span>; ++x2)<br>&#123;<br>a[<span class="hljs-number">8</span>][x2] = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x3 = <span class="hljs-number">0</span>; x3 &lt; <span class="hljs-number">7</span>; ++x3)<br>&#123;<br>a[<span class="hljs-number">9</span>][x3] = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x4 = x3 + <span class="hljs-number">1</span>; x4 &lt; <span class="hljs-number">7</span>; ++x4)<br>&#123;<br>a[<span class="hljs-number">9</span>][x4] = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x5 = <span class="hljs-number">0</span>; x5 &lt; <span class="hljs-number">7</span>; ++x5)<br>&#123;<br><span class="hljs-keyword">if</span> (a[<span class="hljs-number">8</span>][x5] + a[<span class="hljs-number">9</span>][x5] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br>a[<span class="hljs-number">10</span>][x5] = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x6 = x5 + <span class="hljs-number">1</span>; x6 &lt; <span class="hljs-number">7</span>; ++x6)<br>&#123;<br><span class="hljs-keyword">if</span> (a[<span class="hljs-number">8</span>][x6] + a[<span class="hljs-number">9</span>][x6] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br>a[<span class="hljs-number">10</span>][x6] = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x7 = <span class="hljs-number">0</span>; x7 &lt; <span class="hljs-number">7</span>; ++x7)<br>&#123;<br><span class="hljs-keyword">if</span> (a[<span class="hljs-number">8</span>][x7] * a[<span class="hljs-number">9</span>][x7] + a[<span class="hljs-number">9</span>][x7] * a[<span class="hljs-number">10</span>][x7] + a[<span class="hljs-number">8</span>][x7] * a[<span class="hljs-number">10</span>][x7] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br>a[<span class="hljs-number">11</span>][x7] = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x8 = x7 + <span class="hljs-number">1</span>; x8 &lt; <span class="hljs-number">7</span>; ++x8)<br>&#123;<br><br><span class="hljs-keyword">if</span> (a[<span class="hljs-number">8</span>][x8] * a[<span class="hljs-number">9</span>][x8] + a[<span class="hljs-number">9</span>][x8] * a[<span class="hljs-number">10</span>][x8] + a[<span class="hljs-number">8</span>][x8] * a[<span class="hljs-number">10</span>][x8] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br>a[<span class="hljs-number">11</span>][x8] = <span class="hljs-number">0</span>;<br><br><span class="hljs-built_in">show</span>(a);<br><br>a[<span class="hljs-number">11</span>][x8] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br><br>a[<span class="hljs-number">11</span>][x7] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br><br>a[<span class="hljs-number">10</span>][x6] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br><br>a[<span class="hljs-number">10</span>][x5] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show0</span><span class="hljs-params">(<span class="hljs-type">int</span> a[n][<span class="hljs-number">7</span>])</span>    <span class="hljs-comment">//输出——固定</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;    一      二      三      四      五      六      日&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i)<br>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">2</span>) &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; ++j)<br>&#123;<br>cout &lt;&lt; s[a[i][j]] &lt;&lt; <span class="hljs-string">&quot;    &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">int</span> a[n][<span class="hljs-number">7</span>])</span>    <span class="hljs-comment">//输出——随机</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;    一      二      三      四      五      六      日&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">8</span>; i &lt; <span class="hljs-number">12</span>; ++i)<br>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">2</span>) &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; ++j)<br>&#123;<br>cout &lt;&lt; s[a[i][j]] &lt;&lt; <span class="hljs-string">&quot;    &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br>cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>验证哥德巴赫猜想</title>
    <link href="/2021/12/05/2021-12-05-goldbach-conjecture/"/>
    <url>/2021/12/05/2021-12-05-goldbach-conjecture/</url>
    
    <content type="html"><![CDATA[<p>&amp;emsp;</p><p><img src="/img/2021-12-05-goldbach-conjecture/1.jpg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;验证哥德巴赫猜想：一个不小于6的偶数可以表示为两个素数之和&quot;</span> &lt;&lt; endl &lt;&lt; endl;<br><br><span class="hljs-type">int</span> border, num, front;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入欲验证的最大值：&quot;</span>;<br>cin &gt;&gt; border;<br><br><span class="hljs-keyword">for</span> (num = <span class="hljs-number">6</span>; num &lt;= border; num = num + <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (front = <span class="hljs-number">3</span>; front &lt;= num / <span class="hljs-number">2</span>; front = front + <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-comment">//先把num表示为front和另一个奇数behind之和，再判断这两个奇数是否为素数</span><br><span class="hljs-type">int</span> behind = num - front;<br><br><span class="hljs-keyword">if</span> ((<span class="hljs-built_in">judge</span>(front) == <span class="hljs-number">1</span>) &amp; (<span class="hljs-built_in">judge</span>(behind) == <span class="hljs-number">1</span>))<br>&#123;<br>cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot;=&quot;</span> &lt;&lt; front &lt;&lt; <span class="hljs-string">&quot;+&quot;</span> &lt;&lt; behind &lt;&lt; endl;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> tmp)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt;= <span class="hljs-built_in">sqrt</span>(tmp); i = i + <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (tmp % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//只要能被一个奇数整除，它就不是素数</span><br>&#125;<br><br><span class="hljs-comment">//要遍历所有奇数才能说它是素数</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>求素数程序（不断修改）</title>
    <link href="/2021/12/04/2021-12-04-prime-number/"/>
    <url>/2021/12/04/2021-12-04-prime-number/</url>
    
    <content type="html"><![CDATA[<p>&amp;emsp;</p><p><code>源.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;PrimeNumber.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;----------求2—x范围内的素数----------&quot;</span> &lt;&lt; endl &lt;&lt; endl;<br><br><span class="hljs-type">int</span> x;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入边界x：&quot;</span>;<br>cin &gt;&gt; x;<br><br>cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;2-&quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;中所有的素数为：&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">f1</span>(x);<span class="hljs-comment">//常规做法</span><br><span class="hljs-comment">//f2(x);//埃拉托色尼筛选法</span><br><br>cout &lt;&lt; endl &lt;&lt; endl;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>&amp;emsp;</p><p><code>PrimeNumber.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> PrimeNumber_h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PrimeNumber_h</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f1</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<span class="hljs-comment">//常规做法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f2</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<span class="hljs-comment">//埃拉托色尼筛选法</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>&amp;emsp;</p><p><code>PrimeNumber.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;PrimeNumber.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f1</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">//常规做法（已优化）</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">bool</span> judge;<br><span class="hljs-type">int</span> k = <span class="hljs-number">4</span>;<span class="hljs-comment">//对应着2、3、5、7这4个数</span><br>cout &lt;&lt; <span class="hljs-string">&quot;2 3 5 7 &quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">11</span>; i &lt;= x; i = i + <span class="hljs-number">2</span>)<span class="hljs-comment">//i每次加2，排除掉2的倍数</span><br>&#123;<br>judge = <span class="hljs-literal">true</span>;<span class="hljs-comment">//重置输出的判断条件</span><br><br><span class="hljs-comment">//排除掉3、5、7的倍数，因为逢10里必至少有一个</span><br><span class="hljs-keyword">if</span> ((i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) | (i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) | (i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>)) <span class="hljs-keyword">continue</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">11</span>; j*j &lt;= i; j = j + <span class="hljs-number">2</span>)<span class="hljs-comment">//把开方运算换成平方运算，运算速度加快</span><br>&#123;<br><span class="hljs-keyword">if</span> (i%j == <span class="hljs-number">0</span>)<br>&#123;<br>judge = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (judge == <span class="hljs-literal">true</span>)<span class="hljs-comment">//i不能被任何数整除，故输出</span><br>&#123;<br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>k = k + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (k % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-comment">//10个就换行</span><br>&#125;<br><br>&#125;<br><br>cout &lt;&lt; endl &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;共&quot;</span> &lt;&lt; k &lt;&lt; <span class="hljs-string">&quot;个素数&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f2</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">//埃拉托色尼筛选法</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> *a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[x - <span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> i, j;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; x - <span class="hljs-number">1</span>; ++i) a[i] = i + <span class="hljs-number">2</span>;   <span class="hljs-comment">//赋值  </span><br><br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; x - <span class="hljs-number">1</span>; ++j)<br>&#123;<br><span class="hljs-keyword">if</span> (a[j] != <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">//去掉tmp的倍数（即赋值为1）  </span><br><span class="hljs-keyword">for</span> (i = j + <span class="hljs-number">1</span>; i &lt; x - <span class="hljs-number">1</span>; ++i)<br>&#123;<br><span class="hljs-keyword">if</span> (a[i] % a[j] == <span class="hljs-number">0</span>) a[i] = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; x - <span class="hljs-number">1</span>; ++i)<br>&#123;<br><span class="hljs-keyword">if</span> (a[i] != <span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>j = j + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (j % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-comment">//10个就换行</span><br>&#125;<br>&#125;<br><br>cout &lt;&lt; endl &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;共&quot;</span> &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot;个素数&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>初中电脑课本 人脸识别</title>
    <link href="/2021/12/03/2021-12-03-face-recognition/"/>
    <url>/2021/12/03/2021-12-03-face-recognition/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/2021-12-03-face-recognition/1.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><br><span class="hljs-comment">#  导入人脸检测分类器，创建检测对象face</span><br>face = cv2.CascadeClassifier(<span class="hljs-string">&quot;./haarcascades/haarcascade_frontalface_default.xml&quot;</span>)<br>eye = cv2.CascadeClassifier(<span class="hljs-string">&quot;./haarcascades/haarcascade_eye.xml&quot;</span>)  <span class="hljs-comment">###</span><br>img = cv2.imread(<span class="hljs-string">&quot;./photo.jpg&quot;</span>)<br><span class="hljs-comment">#  使用检测对象face启动detectMultiScale函数进行人脸检测。</span><br>faceRects = face.detectMultiScale(<br>    img,<br>    scaleFactor=<span class="hljs-number">1.1</span>,  <span class="hljs-comment"># 在特征比对中，每次图片缩小的比例，</span><br>    minNeighbors=<span class="hljs-number">5</span>,  <span class="hljs-comment"># 设定达到的特征数，</span><br>    minSize=(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>),  <span class="hljs-comment"># 允许得到目标区域的最小范围，</span><br>    maxSize=(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>)  <span class="hljs-comment"># 允许得到目标区域的最大范围。</span><br>)<br>eyeRects = eye.detectMultiScale(  <span class="hljs-comment">###</span><br>    img,<br>    scaleFactor=<span class="hljs-number">1.1</span>,<br>    minNeighbors=<span class="hljs-number">5</span>,<br>    minSize=(<span class="hljs-number">25</span>, <span class="hljs-number">25</span>),  <span class="hljs-comment"># 因为眼睛比脸小，所以这里要调小，一开始调成10，会识别到错误的区域，加到25就没问题了</span><br>    maxSize=(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>)<br>)<br><span class="hljs-built_in">print</span>(faceRects, <span class="hljs-built_in">type</span>(faceRects))  <span class="hljs-comment"># 输出faceRects的值和数据类型</span><br><span class="hljs-built_in">print</span>(eyeRects, <span class="hljs-built_in">type</span>(eyeRects))<br>cv2.rectangle(img, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">140</span>, <span class="hljs-number">40</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)  <span class="hljs-comment"># 20改成40，扩展黄色面积的长度</span><br><span class="hljs-comment">#  标注找到多少的人脸</span><br>cv2.putText(img, <span class="hljs-string">&quot;Finding &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(faceRects)) + <span class="hljs-string">&quot; face&quot;</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">15</span>),<br>            cv2.FONT_HERSHEY_COMPLEX, <span class="hljs-number">0.5</span>, (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), <span class="hljs-number">1</span>)<br>cv2.putText(img, <span class="hljs-string">&quot;Finding &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(eyeRects)) + <span class="hljs-string">&quot; eye&quot;</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">30</span>),  <span class="hljs-comment"># 15改成30，在下面加多一行</span><br>            cv2.FONT_HERSHEY_COMPLEX, <span class="hljs-number">0.5</span>, (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), <span class="hljs-number">1</span>)<br><span class="hljs-comment">#  由于有可能检测到多张人脸，所以要用循环将人脸逐个框出来</span><br><span class="hljs-keyword">for</span> x, y, w, h <span class="hljs-keyword">in</span> faceRects:  <span class="hljs-comment"># 循环获取每张人脸的数据</span><br>    cv2.rectangle(img, (x, y), (x + w, y + h), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">1</span>)  <span class="hljs-comment"># 框出人脸</span><br><span class="hljs-keyword">for</span> x, y, w, h <span class="hljs-keyword">in</span> eyeRects:<br>    cv2.rectangle(img, (x, y), (x + w, y + h), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">1</span>)<br>cv2.imshow(<span class="hljs-string">&quot;image&quot;</span>, img)<br>cv2.waitKey()<br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure><p><a href="../../../../file/haarcascades.7z" title="haarcascades.7z下载">点击下载</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>json 文件预处理</title>
    <link href="/2021/12/02/2021-12-02-json-deal/"/>
    <url>/2021/12/02/2021-12-02-json-deal/</url>
    
    <content type="html"><![CDATA[<p><code>join_publishers.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># publisher总去重排序</span><br><span class="hljs-comment"># 4_publishers文件夹</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br>path = <span class="hljs-string">&quot;D:/Open Academic Graph v2/mag_papers/papers/4_publishers/&quot;</span><br>files = os.listdir(path)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&quot;publishers.txt&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f1:<br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> files:<br>        start = time.perf_counter()<br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + f, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>            lines = file_object.readlines()<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>                f1.write(line)<br><br>        end = time.perf_counter()<br>        <span class="hljs-built_in">print</span>(f, end - start)<br><br>start = time.perf_counter()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&quot;publishers.txt&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f1:<br>    publishers = f1.readlines()<br>    publishers = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(publishers))  <span class="hljs-comment"># 去重</span><br>    publishers.sort()  <span class="hljs-comment"># 排序</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&quot;1_publishers.txt&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f2:<br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> publishers:<br>            f2.write(v)<br><br>end = time.perf_counter()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;final&quot;</span>, end - start)<br></code></pre></td></tr></table></figure><br><p><code>join_venues.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># venue总去重排序</span><br><span class="hljs-comment"># 4_venues</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br>path = <span class="hljs-string">&quot;D:/Open Academic Graph v2/mag_papers/papers/4_venues/&quot;</span><br>files = os.listdir(path)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&quot;venues.txt&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f1:<br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> files:<br>        start = time.perf_counter()<br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + f, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>            lines = file_object.readlines()<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>                f1.write(line)<br><br>        end = time.perf_counter()<br>        <span class="hljs-built_in">print</span>(f, end - start)<br><br>start = time.perf_counter()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&quot;venues.txt&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f1:<br>    venues = f1.readlines()<br>    venues = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(venues))  <span class="hljs-comment"># 去重</span><br>    venues.sort()  <span class="hljs-comment"># 排序</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&quot;1_venues.txt&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f2:<br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> venues:<br>            f2.write(v)<br><br>end = time.perf_counter()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;final&quot;</span>, end - start)<br></code></pre></td></tr></table></figure><br><p><code>lines.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计文件行数</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br>path = <span class="hljs-string">&quot;D:/Open Academic Graph v2/mag_papers/papers/3_publish/&quot;</span><br>files = os.listdir(path)<br><br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> files:<br>    start = time.perf_counter()<br><br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + f, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        <span class="hljs-keyword">for</span> index, line <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(file):<br>            count += <span class="hljs-number">1</span><br><br>    end = time.perf_counter()<br>    <span class="hljs-built_in">print</span>(f, count, end - start, <span class="hljs-string">&quot;s&quot;</span>)<br></code></pre></td></tr></table></figure><br><p><code>publish.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 去除venue和publisher都没有的项</span><br><span class="hljs-comment"># 3_publish文件夹</span><br><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br>path = <span class="hljs-string">&quot;D:/Open Academic Graph v2/mag_papers/papers/2_year/&quot;</span><br>files = os.listdir(path)<br><br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> files:<br>    start = time.perf_counter()<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + f, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>        lines = file_object.readlines()<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&quot;publish_&quot;</span> + f, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f1, \<br>                <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&quot;no_&quot;</span> + f, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f2:<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>                line = <span class="hljs-built_in">eval</span>(line)  <span class="hljs-comment"># str转dict</span><br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-keyword">if</span> line[<span class="hljs-string">&quot;venue&quot;</span>]:<br>                        f1.write(json.dumps(line))  <span class="hljs-comment"># dict转str</span><br>                        f1.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">except</span> KeyError:<br>                    <span class="hljs-keyword">try</span>:<br>                        <span class="hljs-keyword">if</span> line[<span class="hljs-string">&quot;publisher&quot;</span>] == <span class="hljs-string">&quot;&quot;</span>:<br>                            f2.write(json.dumps(line))<br>                            f2.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                        <span class="hljs-keyword">else</span>:<br>                            f1.write(json.dumps(line))<br>                            f1.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                    <span class="hljs-keyword">except</span> KeyError:<br>                        f2.write(json.dumps(line))<br>                        f2.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>    end = time.perf_counter()<br>    <span class="hljs-built_in">print</span>(f, end - start)<br></code></pre></td></tr></table></figure><br><p><code>txt2json.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># txt转json</span><br><span class="hljs-comment"># 在navicat mongodb中使用</span><br><br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">txt2json</span>(<span class="hljs-params">s, name</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(s + name + <span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>        lines = file_object.readlines()<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(s + name + <span class="hljs-string">&quot;_json.txt&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            file.write(<span class="hljs-string">&#x27;[\n&#x27;</span>)<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>                file.write(line.rstrip() + <span class="hljs-string">&#x27;,\n&#x27;</span>)<br><br>    <span class="hljs-comment"># 删掉最后一个空行和逗号</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(s + name + <span class="hljs-string">&quot;_json.txt&quot;</span>, <span class="hljs-string">&#x27;rb+&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.seek(-<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)<br>        file.truncate()<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(s + name + <span class="hljs-string">&quot;_json.txt&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(<span class="hljs-string">&#x27;\n]&#x27;</span>)<br><br><br>path = <span class="hljs-string">&quot;C:/Users/Lin/Desktop/&quot;</span><br>lists = [<span class="hljs-string">&quot;publish_1950_mag_papers_10&quot;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lists:<br>    start = time.perf_counter()<br>    txt2json(path, i)<br>    end = time.perf_counter()<br>    <span class="hljs-built_in">print</span>(i, end - start)<br></code></pre></td></tr></table></figure><br><p><code>venues_publishers.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计venue和publisher的所有类型，并去重排序</span><br><span class="hljs-comment"># 3_publish文件夹</span><br><span class="hljs-comment"># 4_publishers文件夹</span><br><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br>path = <span class="hljs-string">&quot;D:/Open Academic Graph v2/mag_papers/papers/3_publish/&quot;</span><br>files = os.listdir(path)<br><br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> files:<br>    start = time.perf_counter()<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + f, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>        lines = file_object.readlines()<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&quot;venues_&quot;</span> + f, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f1, \<br>                <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&quot;publishers_&quot;</span> + f, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f2:<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>                line = <span class="hljs-built_in">eval</span>(line)  <span class="hljs-comment"># str转dict</span><br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-keyword">if</span> line[<span class="hljs-string">&quot;venue&quot;</span>] != <span class="hljs-string">&quot;&quot;</span>:<br>                        f1.write(json.dumps(line[<span class="hljs-string">&quot;venue&quot;</span>][<span class="hljs-string">&quot;raw&quot;</span>]))<br>                        f1.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">except</span> KeyError:<br>                    <span class="hljs-keyword">pass</span><br><br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-keyword">if</span> line[<span class="hljs-string">&quot;publisher&quot;</span>] != <span class="hljs-string">&quot;&quot;</span>:<br>                        f2.write(json.dumps(line[<span class="hljs-string">&quot;publisher&quot;</span>]))<br>                        f2.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">except</span> KeyError:<br>                    <span class="hljs-keyword">pass</span><br><br>    end = time.perf_counter()<br>    <span class="hljs-built_in">print</span>(f, end - start)<br></code></pre></td></tr></table></figure><br><p><code>year.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 筛选出1950年后的，1950年前的，没有年份的</span><br><span class="hljs-comment"># 2_year文件夹</span><br><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> time<br><br>path = <span class="hljs-string">&quot;D:/Open Academic Graph v2/papers/&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>):<br>    start = time.perf_counter()<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&quot;mag_papers_&quot;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> file_object:<br>        lines = file_object.readlines()<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&quot;year/1950_mag_papers_&quot;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f1, \<br>                <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&quot;year/other_mag_papers_&quot;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f2, \<br>                <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&quot;year/no_mag_papers_&quot;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f3:<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>                line = <span class="hljs-built_in">eval</span>(line)  <span class="hljs-comment"># str转dict</span><br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-keyword">if</span> line[<span class="hljs-string">&quot;year&quot;</span>] &gt;= <span class="hljs-number">1950</span>:<br>                        f1.write(json.dumps(line))  <span class="hljs-comment"># dict转str</span><br>                        f1.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        f2.write(json.dumps(line))<br>                        f2.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">except</span> KeyError:<br>                    f3.write(json.dumps(line))<br>                    f3.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>    end = time.perf_counter()<br>    <span class="hljs-built_in">print</span>(i, end - start)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2018年刑侦科推理题——代码解</title>
    <link href="/2021/12/01/2021-12-01-detective-solution/"/>
    <url>/2021/12/01/2021-12-01-detective-solution/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/2021-12-01-detective-solution/1.jpg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//2018年刑侦科推理试题</span><br><br><span class="hljs-comment">//总思路：</span><br><span class="hljs-comment">//array[0]-array[9]代表1-10题,1-4代表选项A-D</span><br><span class="hljs-comment">//main里逐步筛选所有题目所有选项的可能性，即分别代入function2-function10函数里检查，合适的就留下</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function2</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>])</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function3</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>])</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function4</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>])</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function5</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>])</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function6</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>])</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function7</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>], <span class="hljs-type">int</span> A, <span class="hljs-type">int</span> B, <span class="hljs-type">int</span> C, <span class="hljs-type">int</span> D)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function8</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>])</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function9</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>])</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function10</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>], <span class="hljs-type">int</span> A, <span class="hljs-type">int</span> B, <span class="hljs-type">int</span> C, <span class="hljs-type">int</span> D)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> array[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-keyword">for</span> (array[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; array[<span class="hljs-number">1</span>] &lt;= <span class="hljs-number">4</span>; ++array[<span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-keyword">for</span> (array[<span class="hljs-number">4</span>] = <span class="hljs-number">1</span>; array[<span class="hljs-number">4</span>] &lt;= <span class="hljs-number">4</span>; ++array[<span class="hljs-number">4</span>])<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">function2</span>(array) != <span class="hljs-number">0</span>)   <span class="hljs-comment">//function2：第2、5题联动</span><br>&#123;<br><span class="hljs-keyword">for</span> (array[<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>; array[<span class="hljs-number">2</span>] &lt;= <span class="hljs-number">4</span>; ++array[<span class="hljs-number">2</span>])<br>&#123;<br><span class="hljs-keyword">for</span> (array[<span class="hljs-number">3</span>] = <span class="hljs-number">1</span>; array[<span class="hljs-number">3</span>] &lt;= <span class="hljs-number">4</span>; ++array[<span class="hljs-number">3</span>])<br>&#123;<br><span class="hljs-keyword">for</span> (array[<span class="hljs-number">5</span>] = <span class="hljs-number">1</span>; array[<span class="hljs-number">5</span>] &lt;= <span class="hljs-number">4</span>; ++array[<span class="hljs-number">5</span>])<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">function3</span>(array) != <span class="hljs-number">0</span>)   <span class="hljs-comment">//function3：第2、3、4、6题联动（只动第3、4、6题）</span><br>&#123;<br><span class="hljs-keyword">for</span> (array[<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>; array[<span class="hljs-number">6</span>] &lt;= <span class="hljs-number">4</span>; ++array[<span class="hljs-number">6</span>])<br>&#123;<br><span class="hljs-keyword">for</span> (array[<span class="hljs-number">7</span>] = <span class="hljs-number">1</span>; array[<span class="hljs-number">7</span>] &lt;= <span class="hljs-number">4</span>; ++array[<span class="hljs-number">7</span>])<br>&#123;<br><span class="hljs-keyword">for</span> (array[<span class="hljs-number">8</span>] = <span class="hljs-number">1</span>; array[<span class="hljs-number">8</span>] &lt;= <span class="hljs-number">4</span>; ++array[<span class="hljs-number">8</span>])<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">function5</span>(array) != <span class="hljs-number">0</span>)   <span class="hljs-comment">//function5：第4、5、7、8、9题联动（只动第7、8、9题）</span><br>&#123;<br><span class="hljs-keyword">for</span> (array[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; array[<span class="hljs-number">0</span>] &lt;= <span class="hljs-number">4</span>; ++array[<span class="hljs-number">0</span>])<br>&#123;<br><span class="hljs-keyword">for</span> (array[<span class="hljs-number">9</span>] = <span class="hljs-number">1</span>; array[<span class="hljs-number">9</span>] &lt;= <span class="hljs-number">4</span>; ++array[<span class="hljs-number">9</span>])<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">function9</span>(array) != <span class="hljs-number">0</span>)   <span class="hljs-comment">//function9：第1、2、5、6、9、10题联动（只动第1、10题）</span><br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">function4</span>(array) != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">function6</span>(array) != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">function8</span>(array) != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//先统计1-10题中A-D的个数</span><br><span class="hljs-comment">//为什么把这个功能放在主函数，因为它在第10题中也会用到！</span><br><br><span class="hljs-type">int</span> A = <span class="hljs-number">0</span>, B = <span class="hljs-number">0</span>, C = <span class="hljs-number">0</span>, D = <span class="hljs-number">0</span>;   <span class="hljs-comment">//变量A-D是指选项A-D各自的个数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>&#123;<br><span class="hljs-keyword">switch</span> (array[i])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: A = A + <span class="hljs-number">1</span>; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: B = B + <span class="hljs-number">1</span>; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: C = C + <span class="hljs-number">1</span>; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: D = D + <span class="hljs-number">1</span>; <span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">function7</span>(array, A, B, C, D) != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">function10</span>(array, A, B, C, D) != <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;----------2018年刑侦科推理试题答案----------&quot;</span> &lt;&lt; endl &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>&#123;<br><span class="hljs-keyword">switch</span> (array[i])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: cout &lt;&lt; <span class="hljs-string">&quot;第&quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;题的答案是 &quot;</span> &lt;&lt; <span class="hljs-string">&quot;A&quot;</span> &lt;&lt; endl; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: cout &lt;&lt; <span class="hljs-string">&quot;第&quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;题的答案是 &quot;</span> &lt;&lt; <span class="hljs-string">&quot;B&quot;</span> &lt;&lt; endl; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: cout &lt;&lt; <span class="hljs-string">&quot;第&quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;题的答案是 &quot;</span> &lt;&lt; <span class="hljs-string">&quot;C&quot;</span> &lt;&lt; endl; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: cout &lt;&lt; <span class="hljs-string">&quot;第&quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;题的答案是 &quot;</span> &lt;&lt; <span class="hljs-string">&quot;D&quot;</span> &lt;&lt; endl; <span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function2</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (array[<span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">4</span>] == <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">4</span>] == <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">4</span>] == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">4</span>] == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function3</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (array[<span class="hljs-number">2</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((array[<span class="hljs-number">2</span>] != array[<span class="hljs-number">5</span>])&amp;(array[<span class="hljs-number">2</span>] != array[<span class="hljs-number">1</span>])&amp;(array[<span class="hljs-number">2</span>] != array[<span class="hljs-number">3</span>])) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((array[<span class="hljs-number">5</span>] != array[<span class="hljs-number">2</span>])&amp;(array[<span class="hljs-number">5</span>] != array[<span class="hljs-number">1</span>])&amp;(array[<span class="hljs-number">5</span>] != array[<span class="hljs-number">3</span>])) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((array[<span class="hljs-number">1</span>] != array[<span class="hljs-number">2</span>])&amp;(array[<span class="hljs-number">1</span>] != array[<span class="hljs-number">5</span>])&amp;(array[<span class="hljs-number">1</span>] != array[<span class="hljs-number">3</span>])) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((array[<span class="hljs-number">3</span>] != array[<span class="hljs-number">2</span>])&amp;(array[<span class="hljs-number">3</span>] != array[<span class="hljs-number">5</span>])&amp;(array[<span class="hljs-number">3</span>] != array[<span class="hljs-number">1</span>])) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function5</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (array[<span class="hljs-number">4</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">7</span>] == array[<span class="hljs-number">4</span>]) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">3</span>] == array[<span class="hljs-number">4</span>]) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">8</span>] == array[<span class="hljs-number">4</span>]) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">6</span>] == array[<span class="hljs-number">4</span>]) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function9</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">bool</span> judge1, judge2;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">0</span>] == array[<span class="hljs-number">5</span>]) judge1 = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> judge1 = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">switch</span> (array[<span class="hljs-number">8</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">5</span>] == array[<span class="hljs-number">4</span>]) judge2 = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> judge2 = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">if</span> (judge1 != judge2) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">9</span>] == array[<span class="hljs-number">4</span>]) judge2 = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> judge2 = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">if</span> (judge1 != judge2) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">1</span>] == array[<span class="hljs-number">4</span>]) judge2 = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> judge2 = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">if</span> (judge1 != judge2) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">8</span>] == array[<span class="hljs-number">4</span>]) judge2 = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> judge2 = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">if</span> (judge1 != judge2) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function4</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (array[<span class="hljs-number">3</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">0</span>] == array[<span class="hljs-number">4</span>]) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">1</span>] == array[<span class="hljs-number">6</span>]) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">0</span>] == array[<span class="hljs-number">8</span>]) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">5</span>] == array[<span class="hljs-number">9</span>]) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function6</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (array[<span class="hljs-number">5</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((array[<span class="hljs-number">1</span>] == array[<span class="hljs-number">7</span>])&amp;(array[<span class="hljs-number">3</span>] == array[<span class="hljs-number">7</span>])) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((array[<span class="hljs-number">0</span>] == array[<span class="hljs-number">7</span>])&amp;(array[<span class="hljs-number">5</span>] == array[<span class="hljs-number">7</span>])) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((array[<span class="hljs-number">2</span>] == array[<span class="hljs-number">7</span>])&amp;(array[<span class="hljs-number">9</span>] == array[<span class="hljs-number">7</span>])) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((array[<span class="hljs-number">4</span>] == array[<span class="hljs-number">7</span>])&amp;(array[<span class="hljs-number">8</span>] == array[<span class="hljs-number">7</span>])) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function8</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//在字母表中相邻，选项A和D是特殊情况,只有一边</span><br><span class="hljs-keyword">switch</span> (array[<span class="hljs-number">7</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&#123;<br><span class="hljs-keyword">switch</span> (array[<span class="hljs-number">0</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">if</span> (array[<span class="hljs-number">6</span>] == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-keyword">if</span> (array[<span class="hljs-number">6</span>] == <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">default</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((array[<span class="hljs-number">6</span>] != array[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>)&amp;(array[<span class="hljs-number">6</span>] != array[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>&#123;<br><span class="hljs-keyword">switch</span> (array[<span class="hljs-number">0</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">if</span> (array[<span class="hljs-number">4</span>] == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-keyword">if</span> (array[<span class="hljs-number">4</span>] == <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">default</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((array[<span class="hljs-number">4</span>] != array[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>)&amp;(array[<span class="hljs-number">4</span>] != array[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>&#123;<br><span class="hljs-keyword">switch</span> (array[<span class="hljs-number">0</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">if</span> (array[<span class="hljs-number">1</span>] == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-keyword">if</span> (array[<span class="hljs-number">1</span>] == <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">default</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((array[<span class="hljs-number">1</span>] != array[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>)&amp;(array[<span class="hljs-number">1</span>] != array[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>&#123;<br><span class="hljs-keyword">switch</span> (array[<span class="hljs-number">0</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">if</span> (array[<span class="hljs-number">9</span>] == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-keyword">if</span> (array[<span class="hljs-number">9</span>] == <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">default</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((array[<span class="hljs-number">9</span>] != array[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>)&amp;(array[<span class="hljs-number">9</span>] != array[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function7</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>], <span class="hljs-type">int</span> A, <span class="hljs-type">int</span> B, <span class="hljs-type">int</span> C, <span class="hljs-type">int</span> D)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (array[<span class="hljs-number">6</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((C &lt;= A)&amp;(C &lt;= B)&amp;(C &lt;= D)) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((B &lt;= A)&amp;(B &lt;= C)&amp;(B &lt;= D)) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((A &lt;= B)&amp;(A &lt;= C)&amp;(A &lt;= D)) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>&#123;<br><span class="hljs-keyword">if</span> ((D &lt;= A)&amp;(D &lt;= B)&amp;(D &lt;= C)) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">function10</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">10</span>], <span class="hljs-type">int</span> A, <span class="hljs-type">int</span> B, <span class="hljs-type">int</span> C, <span class="hljs-type">int</span> D)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//承接第7题的变量A-D，把它们按从小到大排序</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">4</span>] = &#123; A, B, C, D &#125;, tmp;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">4</span>; ++j)   <span class="hljs-comment">//j控制内层循环,共4轮</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i)<br>&#123;<br><span class="hljs-keyword">if</span> (a[i] &gt;= a[i + <span class="hljs-number">1</span>])<br>&#123;<br>tmp = a[i];<br>a[i] = a[i + <span class="hljs-number">1</span>];<br>a[i + <span class="hljs-number">1</span>] = tmp;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> difference = a[<span class="hljs-number">3</span>] - a[<span class="hljs-number">0</span>];<br><br><span class="hljs-keyword">switch</span> (array[<span class="hljs-number">9</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (difference == <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (difference == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (difference == <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>&#123;<br><span class="hljs-keyword">if</span> (difference == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> array[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/2021-12-01-detective-solution/2.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Magisk 安装教程</title>
    <link href="/2021/06/21/2021-06-21-magisk-install/"/>
    <url>/2021/06/21/2021-06-21-magisk-install/</url>
    
    <content type="html"><![CDATA[<p>下载地址：<a href="https://github.com/topjohnwu/Magisk">https://github.com/topjohnwu/Magisk</a></p><p>下载完先安装 <code>apk</code>，再把 <code>apk</code> 后缀改为 <code>zip</code>，放到手机中再从 Magisk App 刷入。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>html 图片文字全部居中</title>
    <link href="/2021/06/20/2021-06-20-html-middle/"/>
    <url>/2021/06/20/2021-06-20-html-middle/</url>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.vcenter</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>:absolute;</span><br><span class="language-css">    <span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;</span><br><span class="language-css">    translateX(-<span class="hljs-number">50%</span>);</span><br><span class="language-css">    translateY(-<span class="hljs-number">50%</span>);</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid black; </span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;middle&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../Images/2.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;2.jpg&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;vcenter&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>多行文字1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>多行文字2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在页面添加返回顶部按钮</title>
    <link href="/2021/06/19/2021-06-19-top-button/"/>
    <url>/2021/06/19/2021-06-19-top-button/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://blog.csdn.net/insgo/article/details/113799700">https://blog.csdn.net/insgo/article/details/113799700</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ==UserScript==</span><br><span class="hljs-comment">// @name         totop</span><br><span class="hljs-comment">// @namespace    http://unamerrr.net/</span><br><span class="hljs-comment">// @version      0.1</span><br><span class="hljs-comment">// @match        *://*/*</span><br><span class="hljs-comment">// @description  返回顶部</span><br><span class="hljs-comment">// @author       unamerrr</span><br><span class="hljs-comment">// @grant        none</span><br><span class="hljs-comment">// ==/UserScript==</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-string">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-keyword">var</span> toTopBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;button&#x27;</span>) toTopBtn.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;返回顶部&quot;</span>toTopBtn.<span class="hljs-property">className</span> = <span class="hljs-string">&quot;a-b-c-d-toTop&quot;</span>toTopBtn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-title function_">scrollTo</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    &#125;<br>    <span class="hljs-keyword">var</span> body = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span><br>    <span class="hljs-keyword">var</span> style = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;style&#x27;</span>) style.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;a-b-c-d-style&quot;</span><br>    <span class="hljs-keyword">var</span> css = <span class="hljs-string">`.a - b - c - d - toTop &#123;</span><br><span class="hljs-string">        position: fixed;</span><br><span class="hljs-string">        bottom: 10 % ;</span><br><span class="hljs-string">        right: 5 % ;</span><br><span class="hljs-string">        width: 50px;</span><br><span class="hljs-string">        height: 50px;</span><br><span class="hljs-string">        border - radius: 50 % ;</span><br><span class="hljs-string">        font - size: 15px;</span><br><span class="hljs-string">        z - index: 999;</span><br><span class="hljs-string">        cursor: pointer;</span><br><span class="hljs-string">        font - size: 12px;</span><br><span class="hljs-string">        overflow: hidden;</span><br><span class="hljs-string">    &#125;`</span><br>    <span class="hljs-keyword">if</span> (style.<span class="hljs-property">styleSheet</span>) &#123;<br>        style.<span class="hljs-property">styleSheet</span>.<span class="hljs-property">cssText</span> = css;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        style.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(css));<br>    &#125;<br>    body.<span class="hljs-title function_">appendChild</span>(toTopBtn) body.<span class="hljs-title function_">appendChild</span>(style)<br>    <span class="hljs-comment">// Your code here...</span><br>&#125;)();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>百度网盘显示网络连接失败，WiFi 和流量都没用怎么办？</title>
    <link href="/2021/06/18/2021-06-18-baidu-netdisk/"/>
    <url>/2021/06/18/2021-06-18-baidu-netdisk/</url>
    
    <content type="html"><![CDATA[<p>把 ip 改为静态，再改回自动就行了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在 txt 的每行首尾加上内容</title>
    <link href="/2021/06/17/2021-06-17-txt-add/"/>
    <url>/2021/06/17/2021-06-17-txt-add/</url>
    
    <content type="html"><![CDATA[<p>在 <code>替换</code> 处选择 <code>正则表达式</code>，首：<code>^</code>，尾：<code>$</code>。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>adb 常用命令</title>
    <link href="/2021/06/16/2021-06-16-adb-shell/"/>
    <url>/2021/06/16/2021-06-16-adb-shell/</url>
    
    <content type="html"><![CDATA[<ol><li>查看所有包：<code>abd shell pm list packages</code></li><li>查看所有禁用的包：<code>adb shell pm list packages -d</code></li><li>查看所有启用的包：<code>adb shell pm list packages -e</code></li><li>禁用某个包：<code>adb shell pm disable-user 包名</code></li><li>启用某个包：<code>adb shell pm enable 包名</code></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Win10 重启 Windows 资源管理器 explorer.exe</title>
    <link href="/2021/06/15/2021-06-15-explorer-reboot/"/>
    <url>/2021/06/15/2021-06-15-explorer-reboot/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/2021-06-15-explorer-reboot/1.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CMD 一次执行多条命令</title>
    <link href="/2021/06/14/2021-06-14-cmd-more/"/>
    <url>/2021/06/14/2021-06-14-cmd-more/</url>
    
    <content type="html"><![CDATA[<p><code>test.bat</code> 每行填入一个命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">command 1<br>command 2<br>command 3<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何批量合并 txt 文件</title>
    <link href="/2021/06/12/2021-06-12-txt-merge/"/>
    <url>/2021/06/12/2021-06-12-txt-merge/</url>
    
    <content type="html"><![CDATA[<p><code>copy *.txt 合并文件.txt</code> 保存为 <code>bat</code> 文件。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>中文文案排版指北（转载）</title>
    <link href="/2021/06/08/2021-06-08-writing-guidelines/"/>
    <url>/2021/06/08/2021-06-08-writing-guidelines/</url>
    
    <content type="html"><![CDATA[<p>统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。</p><p>其他语言：</p><ul><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.en-US.md">英语</a></li><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.md">繁体中文</a></li><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.zh-CN.md">简体中文</a></li><li><a href="https://github.com/mzlogin/chinese-copywriting-guidelines">简体中文</a>（外部链接）</li></ul><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>{:.no_toc}</p><ul><li>TOC {:toc}</li></ul><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p><p>与大家共勉之。」——<a href="https://github.com/vinta/pangu.js">vinta&#x2F;paranoid-auto-spacing</a></p><h3 id="中英文之间需要增加空格"><a href="#中英文之间需要增加空格" class="headerlink" title="中英文之间需要增加空格"></a>中英文之间需要增加空格</h3><p>正确：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p></blockquote><p>错误：</p><blockquote><p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p><p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p></blockquote><p>完整的正确用法：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个 <code>AVObject</code> 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code> 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p></blockquote><p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。</p><h3 id="中文与数字之间需要增加空格"><a href="#中文与数字之间需要增加空格" class="headerlink" title="中文与数字之间需要增加空格"></a>中文与数字之间需要增加空格</h3><p>正确：</p><blockquote><p>今天出去买菜花了 5000 元。</p></blockquote><p>错误：</p><blockquote><p>今天出去买菜花了 5000元。</p><p>今天出去买菜花了5000元。</p></blockquote><h3 id="数字与单位之间需要增加空格"><a href="#数字与单位之间需要增加空格" class="headerlink" title="数字与单位之间需要增加空格"></a>数字与单位之间需要增加空格</h3><p>正确：</p><blockquote><p>我家的光纤入屋宽带有 10 Gbps，SSD 一共有 20 TB</p></blockquote><p>错误：</p><blockquote><p>我家的光纤入屋宽带有 10Gbps，SSD 一共有 20TB</p></blockquote><p>例外：度 &#x2F; 百分比与数字之间不需要增加空格：</p><p>正确：</p><blockquote><p>今天是 233° 的高温。</p><p>新 MacBook Pro 有 15% 的 CPU 性能提升。</p></blockquote><p>错误：</p><blockquote><p>今天是 233 ° 的高温。</p><p>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p></blockquote><h3 id="全角标点与其他字符之间不加空格"><a href="#全角标点与其他字符之间不加空格" class="headerlink" title="全角标点与其他字符之间不加空格"></a>全角标点与其他字符之间不加空格</h3><p>正确：</p><blockquote><p>刚刚买了一部 iPhone，好开心！</p></blockquote><p>错误：</p><blockquote><p>刚刚买了一部 iPhone ，好开心！</p><p>刚刚买了一部 iPhone， 好开心！</p></blockquote><h3 id="用-text-spacing-来挽救？"><a href="#用-text-spacing-来挽救？" class="headerlink" title="用 text-spacing 来挽救？"></a>用 <code>text-spacing</code> 来挽救？</h3><p>CSS Text Module Level 4 的 <a href="https://www.w3.org/TR/css-text-4/#text-spacing-property"><code>text-spacing</code></a> 和 Microsoft 的 <a href="https://msdn.microsoft.com/library/ms531164(v=vs.85).aspx"><code>-ms-text-autospace</code></a> 可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 macOS、iOS、Windows 等用户介面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p><h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><h3 id="不重复使用标点符号"><a href="#不重复使用标点符号" class="headerlink" title="不重复使用标点符号"></a>不重复使用标点符号</h3><p>正确：</p><blockquote><p>德国队竟然战胜了巴西队！</p><p>她竟然对你说「喵」？！</p></blockquote><p>错误：</p><blockquote><p>德国队竟然战胜了巴西队！！</p><p>德国队竟然战胜了巴西队！！！！！！！！</p><p>她竟然对你说「喵」？？！！</p><p>她竟然对你说「喵」？！？！？？！！</p></blockquote><h2 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h2><p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2">全形和半形</a>』。</p><h3 id="使用全角中文标点"><a href="#使用全角中文标点" class="headerlink" title="使用全角中文标点"></a>使用全角中文标点</h3><p>正确：</p><blockquote><p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！</p><p>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p></blockquote><p>错误：</p><blockquote><p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎！</p><p>嗨!你知道嘛?今天前台的小妹跟我说”喵”了哎！</p><p>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!</p><p>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p></blockquote><h3 id="数字使用半角字符"><a href="#数字使用半角字符" class="headerlink" title="数字使用半角字符"></a>数字使用半角字符</h3><p>正确：</p><blockquote><p>这个蛋糕只卖 1000 元。</p></blockquote><p>错误：</p><blockquote><p>这个蛋糕只卖 １０００ 元。</p></blockquote><p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全形数字的。</p><h3 id="遇到完整的英文整句、特殊名词，其内容使用半角标点"><a href="#遇到完整的英文整句、特殊名词，其内容使用半角标点" class="headerlink" title="遇到完整的英文整句、特殊名词，其内容使用半角标点"></a>遇到完整的英文整句、特殊名词，其内容使用半角标点</h3><p>正确：</p><blockquote><p>贾伯斯那句话是怎么说的？「Stay hungry, stay foolish.」</p><p>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><p>错误：</p><blockquote><p>贾伯斯那句话是怎么说的？「Stay hungry，stay foolish。」</p><p>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="专有名词使用正确的大小写"><a href="#专有名词使用正确的大小写" class="headerlink" title="专有名词使用正确的大小写"></a>专有名词使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论内容，在这里只对部分易错用法进行简述。</p><p>正确：</p><blockquote><p>使用 GitHub 登录</p><p>我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。</p></blockquote><p>错误：</p><blockquote><p>使用 github 登录</p><p>使用 GITHUB 登录</p><p>使用 Github 登录</p><p>使用 gitHub 登录</p><p>使用 gｲんĤЦ8 登录</p><p>我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。</p><p>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。</p><p>我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。</p><p>我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。</p><p>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p></blockquote><p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标淮的大小写规范进行书写；并通过 <code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code> 对表现形式进行定义。</p><h3 id="不要使用不地道的缩写"><a href="#不要使用不地道的缩写" class="headerlink" title="不要使用不地道的缩写"></a>不要使用不地道的缩写</h3><p>正确：</p><blockquote><p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</p></blockquote><p>错误：</p><blockquote><p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</p></blockquote><h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p>以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p><h3 id="链接之间增加空格"><a href="#链接之间增加空格" class="headerlink" title="链接之间增加空格"></a>链接之间增加空格</h3><p>用法：</p><blockquote><p>请 <a href="https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.zh-CN.md">提交一个 issue</a> 并分配给相关同事。</p><p>访问我们网站的最新动态，请 <a href="https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.zh-CN.md">点击这里</a> 进行订阅！</p></blockquote><p>对比用法：</p><blockquote><p>请<a href="https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.zh-CN.md">提交一个 issue</a>并分配给相关同事。</p><p>访问我们网站的最新动态，请<a href="https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.zh-CN.md">点击这里</a>进行订阅！</p></blockquote><h3 id="简体中文使用直角引号"><a href="#简体中文使用直角引号" class="headerlink" title="简体中文使用直角引号"></a>简体中文使用直角引号</h3><p>用法：</p><blockquote><p>「老师，『有条不紊』的『紊』是什么意思？」</p></blockquote><p>对比用法：</p><blockquote><p>“老师，‘有条不紊’的‘紊’是什么意思？”</p></blockquote><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th>仓库</th><th>语言</th></tr></thead><tbody><tr><td><a href="https://github.com/vinta/paranoid-auto-spacing">vinta&#x2F;paranoid-auto-spacing</a></td><td>JavaScript</td></tr><tr><td><a href="https://github.com/huei90/pangu.node">huei90&#x2F;pangu.node</a></td><td>Node.js</td></tr><tr><td><a href="https://github.com/huacnlee/auto-correct">huacnlee&#x2F;auto-correct</a></td><td>Ruby</td></tr><tr><td><a href="https://github.com/sparanoid/space-lover">sparanoid&#x2F;space-lover</a></td><td>PHP (WordPress)</td></tr><tr><td><a href="https://github.com/NauxLiu/auto-correct">nauxliu&#x2F;auto-correct</a></td><td>PHP</td></tr><tr><td><a href="https://github.com/jxlwqq/chinese-typesetting">jxlwqq&#x2F;chinese-typesetting</a></td><td>PHP</td></tr><tr><td><a href="https://github.com/hotoo/pangu.vim">hotoo&#x2F;pangu.vim</a></td><td>Vim</td></tr><tr><td><a href="https://github.com/sparanoid/grunt-auto-spacing">sparanoid&#x2F;grunt-auto-spacing</a></td><td>Node.js (Grunt)</td></tr><tr><td><a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk">hjiang&#x2F;scripts&#x2F;add-space-between-latin-and-cjk</a></td><td>Python</td></tr><tr><td><a href="https://github.com/hustcc/hint">hustcc&#x2F;hint</a></td><td>Python</td></tr><tr><td><a href="https://github.com/studygolang/autocorrect">studygolang&#x2F;autocorrect</a></td><td>Go</td></tr></tbody></table><h2 id="谁在这样做？"><a href="#谁在这样做？" class="headerlink" title="谁在这样做？"></a>谁在这样做？</h2><table><thead><tr><th>网站</th><th>文案</th><th>UGC</th></tr></thead><tbody><tr><td><a href="https://www.apple.com/cn/">Apple 中国</a></td><td>是</td><td>N&#x2F;A</td></tr><tr><td><a href="https://www.apple.com/hk/">Apple 香港</a></td><td>是</td><td>N&#x2F;A</td></tr><tr><td><a href="https://www.apple.com/tw/">Apple 台湾</a></td><td>是</td><td>N&#x2F;A</td></tr><tr><td><a href="https://www.microsoft.com/zh-cn/">Microsoft 中国</a></td><td>是</td><td>N&#x2F;A</td></tr><tr><td><a href="https://www.microsoft.com/zh-hk/">Microsoft 香港</a></td><td>是</td><td>N&#x2F;A</td></tr><tr><td><a href="https://www.microsoft.com/zh-tw/">Microsoft 台湾</a></td><td>是</td><td>N&#x2F;A</td></tr><tr><td><a href="https://leancloud.cn/">LeanCloud</a></td><td>是</td><td>N&#x2F;A</td></tr><tr><td><a href="https://www.v2ex.com/">V2EX</a></td><td>是</td><td>是</td></tr><tr><td><a href="https://apple4us.com/">Apple4us</a></td><td>是</td><td>N&#x2F;A</td></tr><tr><td><a href="https://ruby-china.org/">Ruby China</a></td><td>是</td><td>标题达成</td></tr><tr><td><a href="https://phphub.org/">PHPHub</a></td><td>是</td><td>标题达成</td></tr><tr><td><a href="https://sspai.com/">少数派</a></td><td>是</td><td>N&#x2F;A</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.thoughtco.com/guidelines-for-using-capital-letters-1691724">Guidelines for Using Capital Letters - ThoughtCo.</a></li><li><a href="https://en.wikipedia.org/wiki/Letter_case">Letter case - Wikipedia</a></li><li><a href="https://en.oxforddictionaries.com/grammar/punctuation">Punctuation - Oxford Dictionaries</a></li><li><a href="https://owl.english.purdue.edu/owl/section/1/6/">Punctuation - The Purdue OWL</a></li><li><a href="https://www.wikihow.com/Use-English-Punctuation-Correctly">How to Use English Punctuation Correctly - wikiHow</a></li><li><a href="https://zh.opensuse.org/index.php?title=Help:%E6%A0%BC%E5%BC%8F">格式 - openSUSE</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2">全形和半形 - 维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%BC%95%E8%99%9F">引号 - 维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%96%91%E5%95%8F%E9%A9%9A%E5%98%86%E8%99%9F">疑问惊叹号 - 维基百科</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LaTeX 合集</title>
    <link href="/2021/01/15/2021-01-15-latex/"/>
    <url>/2021/01/15/2021-01-15-latex/</url>
    
    <content type="html"><![CDATA[<p>1、TeX Live 换为清华源：</p><p>打开命令行，进入 TeX Live 安装目录，比如 <code>C:\texlive\2020</code>，在命令行中执行 <code>tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet</code> 即可永久更改镜像源。</p><p>（本人已换用 MiKTeX，更为轻便）</p><p>2、TeXstudio 主题设置：<a href="https://tex.stackexchange.com/questions/108315/how-can-i-set-a-dark-theme-in-texstudio">https://tex.stackexchange.com/questions/108315/how-can-i-set-a-dark-theme-in-texstudio</a></p><p>3、LaTeX 入门文档：<a href="https://liam.page/2014/09/08/latex-introduction">https://liam.page/2014/09/08/latex-introduction</a></p><p>LaTeX 模板大全：<a href="https://www.latexstudio.net/">https://www.latexstudio.net</a></p><p>数学建模国赛模板：<a href="https://github.com/latexstudio/CUMCMThesis">https://github.com/latexstudio/CUMCMThesis</a></p><p>数学建模美赛模板：<a href="https://github.com/qyxf/easymcm">https://github.com/qyxf/easymcm</a></p><p>4、部分自用模板：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>[12pt,a4paper,UTF8]&#123;ctexart&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;graphicx&#125; <span class="hljs-comment">% 插入图片</span><br><span class="hljs-keyword">\usepackage</span>&#123;subcaption&#125; <span class="hljs-comment">% 图片下方的描述文字</span><br><span class="hljs-keyword">\usepackage</span>&#123;underscore&#125; <span class="hljs-comment">% 使下划线可用</span><br><span class="hljs-keyword">\usepackage</span>&#123;url&#125; <span class="hljs-comment">% 插入网址</span><br><span class="hljs-keyword">\usepackage</span>&#123;amsmath&#125; <span class="hljs-comment">% 数学公式</span><br><span class="hljs-keyword">\usepackage</span>&#123;amssymb&#125; <span class="hljs-comment">% 数学符号</span><br><span class="hljs-keyword">\setmainfont</span>&#123;Microsoft YaHei&#125;  <span class="hljs-comment">% 设置英文字体为微软雅黑</span><br><span class="hljs-keyword">\setCJKmainfont</span>&#123;Microsoft YaHei&#125;  <span class="hljs-comment">% 设置中文字体为微软雅黑</span><br><span class="hljs-keyword">\pagestyle</span>&#123;plain&#125; <span class="hljs-comment">% 设置页脚数字居中</span><br><span class="hljs-keyword">\setlength</span>&#123;<span class="hljs-keyword">\parindent</span>&#125;&#123;0pt&#125; <span class="hljs-comment">% 去掉全局的首行自动缩进</span><br><span class="hljs-comment">% \noindent % 去掉某段的首行自动缩进</span><br><br><span class="hljs-comment">%\usepackage&#123;fancyhdr&#125; % 设置页眉页脚</span><br><span class="hljs-comment">%\pagestyle&#123;fancy&#125;</span><br><span class="hljs-comment">%\lhead&#123;&#125; % 左页眉</span><br><span class="hljs-comment">%\rhead&#123;&#125; % 右页眉</span><br><span class="hljs-comment">%\lfoot&#123;&#125; % 左页脚</span><br><span class="hljs-comment">%\cfoot&#123;&#125; % 中页脚</span><br><span class="hljs-comment">%\rfoot&#123;\thepage&#125; % 右页脚</span><br><span class="hljs-comment">%\renewcommand&#123;\headrulewidth&#125;&#123;0.4pt&#125; % 设置页眉分割线</span><br><span class="hljs-comment">%\renewcommand&#123;\headwidth&#125;&#123;\textwidth&#125;</span><br><span class="hljs-comment">%\renewcommand&#123;\footrulewidth&#125;&#123;0pt&#125;</span><br><br><span class="hljs-comment">%\usepackage&#123;geometry&#125; % 设置页边距</span><br><span class="hljs-comment">%\geometry&#123;papersize=&#123;21cm,29.7cm&#125;&#125;</span><br><span class="hljs-comment">%\geometry&#123;left=3.18cm,right=3.18cm,top=2.54cm,bottom=2.54cm&#125;</span><br><br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br><span class="hljs-keyword">\title</span>&#123;<span class="hljs-keyword">\textbf</span>&#123;2017级第一次作业&#125;&#125;<br><span class="hljs-keyword">\author</span>&#123;<span class="hljs-keyword">\textbf</span>&#123;林瑞洲 20172131071&#125;&#125;<br><span class="hljs-keyword">\date</span>&#123;<span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-keyword">\today</span>&#125;&#125; <span class="hljs-comment">% 今日日期</span><br><br><span class="hljs-keyword">\maketitle</span> <span class="hljs-comment">% 标题页</span><br><span class="hljs-keyword">\tableofcontents</span> <span class="hljs-comment">% 目录页</span><br><span class="hljs-keyword">\newpage</span> <span class="hljs-comment">% 新一页</span><br><br><span class="hljs-keyword">\section</span>&#123;&#125;<br><span class="hljs-keyword">\subsection</span>&#123;&#125;<br><span class="hljs-keyword">\subsubsection</span>&#123;&#125;<br><br><span class="hljs-keyword">\begin</span>&#123;figure&#125;[!h]<br><span class="hljs-keyword">\centering</span><br><span class="hljs-keyword">\includegraphics</span>[width = <span class="hljs-keyword">\textwidth</span>]&#123;pictures/1.png&#125; <span class="hljs-comment">% 图片自行准备</span><br><span class="hljs-keyword">\caption</span>&#123;123&#125;<br><span class="hljs-comment">% \label&#123;1&#125; % 一般不用，用于文章中引用图片</span><br><span class="hljs-keyword">\end</span>&#123;figure&#125;<br><br><span class="hljs-keyword">\begin</span>&#123;itemize&#125;<br><span class="hljs-keyword">\item</span> a<br><span class="hljs-keyword">\item</span> b<br><span class="hljs-keyword">\end</span>&#123;itemize&#125;<br><br><span class="hljs-keyword">\begin</span>&#123;enumerate&#125; <span class="hljs-comment">% 后面可以加参数</span><br><span class="hljs-keyword">\item</span> a<br><span class="hljs-keyword">\item</span> b<br><span class="hljs-keyword">\end</span>&#123;enumerate&#125;<br><br><span class="hljs-built_in">$</span>a=b+c<span class="hljs-built_in">$</span> <span class="hljs-comment">% 行内公式</span><br><span class="hljs-keyword">\[</span>a=b+c<span class="hljs-keyword">\]</span> <span class="hljs-comment">% 行间公式（不带序号）</span><br><span class="hljs-keyword">\begin</span>&#123;equation&#125;  <span class="hljs-comment">% 行间公式（带序号）</span><br>a=b+c<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br><br><span class="hljs-comment">% 画表格</span><br><span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|c|c|c|&#125; <span class="hljs-comment">% l：居左，c：居中，r：居右</span><br><span class="hljs-keyword">\hline</span><br>A <span class="hljs-built_in">&amp;</span> B <span class="hljs-built_in">&amp;</span> 类标号<span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\hline</span><br>T <span class="hljs-built_in">&amp;</span> F <span class="hljs-built_in">&amp;</span> + <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\hline</span><br><span class="hljs-keyword">\end</span>&#123;tabular&#125;<br><br>~<span class="hljs-keyword">\\</span> <span class="hljs-comment">% 换行</span><br><br><span class="hljs-keyword">\textbf</span>&#123;123&#125; <span class="hljs-comment">% 加粗</span><br><br>a<span class="hljs-keyword">\quad</span> b <span class="hljs-comment">% 空格</span><br><br><span class="hljs-comment">% 特殊字符如%，&#123;&#125;等，要在前面加上转义字符\</span><br><br><span class="hljs-comment">% 公式篇</span><br><span class="hljs-keyword">\[</span><span class="hljs-keyword">\rightarrow</span><span class="hljs-keyword">\]</span><br><span class="hljs-keyword">\[</span><span class="hljs-keyword">\sigma</span><span class="hljs-keyword">\]</span><br><span class="hljs-keyword">\[</span><span class="hljs-keyword">\cup</span><span class="hljs-keyword">\]</span><br><span class="hljs-keyword">\[</span><span class="hljs-keyword">\ne</span><span class="hljs-keyword">\]</span><br><span class="hljs-keyword">\[</span><span class="hljs-keyword">\leqslant</span><span class="hljs-keyword">\]</span><br><span class="hljs-keyword">\[</span><span class="hljs-keyword">\geqslant</span><span class="hljs-keyword">\]</span><br><br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><p>效果如下：</p><p>（演示用的PDF文件已丢失）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 爬取 B 站 UP 主相册所有图片</title>
    <link href="/2021/01/14/2021-01-14-bili-img/"/>
    <url>/2021/01/14/2021-01-14-bili-img/</url>
    
    <content type="html"><![CDATA[<p>参考网址：</p><p><a href="https://www.52pojie.cn/thread-1202155-1-1.html">https://www.52pojie.cn/thread-1202155-1-1.html</a></p><p><a href="https://www.52pojie.cn/thread-1202189-1-1.html">https://www.52pojie.cn/thread-1202189-1-1.html</a></p><p>源代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br><br>requests.packages.urllib3.disable_warnings()  <span class="hljs-comment"># 作用是去掉警告信息，仅仅是为了美观，可以去掉</span><br>uid = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入B站UP主的UID：&quot;</span>)<br><span class="hljs-comment"># User-Agent可自行获取与修改</span><br>headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36&#x27;</span>&#125;<br>pic_list = []  <span class="hljs-comment"># 存放图片链接</span><br>page = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    url = <span class="hljs-string">&#x27;https://api.vc.bilibili.com/link_draw/v1/doc/doc_list?uid=&#x27;</span> + <span class="hljs-built_in">str</span>(uid) + <span class="hljs-string">&#x27;&amp;page_num=&#x27;</span> + <span class="hljs-built_in">str</span>(page) + <span class="hljs-string">&#x27;&amp;page_size=30&amp;biz=all&#x27;</span><br>    page += <span class="hljs-number">1</span><br>    content = requests.get(url, headers=headers, verify=<span class="hljs-literal">False</span>).content<br>    dic = json.loads(content)  <span class="hljs-comment"># 将json转化为字典</span><br>    item_list = dic.get(<span class="hljs-string">&#x27;data&#x27;</span>).get(<span class="hljs-string">&#x27;items&#x27;</span>)  <span class="hljs-comment"># 获取项目信息列表</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(item_list) == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 如果爬完了就停止</span><br>        <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> item_list:<br>        pic = i.get(<span class="hljs-string">&#x27;pictures&#x27;</span>)[<span class="hljs-number">0</span>].get(<span class="hljs-string">&#x27;img_src&#x27;</span>)<br>        pic_list.append(pic)<br><br>os.mkdir(<span class="hljs-string">&#x27;./&#x27;</span> + <span class="hljs-built_in">str</span>(uid))<br>count = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> pic_url <span class="hljs-keyword">in</span> pic_list:<br>    content = requests.get(pic_url, headers=headers, verify=<span class="hljs-literal">False</span>).content<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./&#x27;</span> + <span class="hljs-built_in">str</span>(uid) + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">str</span>(count) + <span class="hljs-string">&#x27;.&#x27;</span> + pic_url[-<span class="hljs-number">3</span>:], <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(content)<br><br>    count += <span class="hljs-number">1</span><br>&#125; ())<br></code></pre></td></tr></table></figure><p>使用方法：</p><p>输入 UP 主的 <code>UID</code> 即可。<code>UID</code> 如下图所示：</p><p><img src="/img/2021-01-14-bili-img/1.png"></p><p>会在当前目录新建一个以 <code>UID</code> 命名的文件夹，图片下载到文件夹中，且已经编号。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Steam 探索队列控制台版（无视锁区游戏）</title>
    <link href="/2021/01/12/2021-01-12-steam-explore/"/>
    <url>/2021/01/12/2021-01-12-steam-explore/</url>
    
    <content type="html"><![CDATA[<p>参考网址：<a href="https://keylol.com/t157861-1-1">https://keylol.com/t157861-1-1</a></p><p>适用情况：活动期间，Steam 可能会有每天 3 轮的探索队列任务。</p><p>先打开任意 Steam 页面并登录，然后打开浏览器控制台，把下面的代码复制到浏览器控制台运行即可。</p><p>Tips：</p><ul><li>支持所有浏览器，也不会遇到游戏锁区的问题。</li><li>在控制台输入的地方，按键盘的上箭头(↑)可快速输入上次运行过的命令。</li></ul><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> <span class="hljs-title function_">_exec</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> appids, running = <span class="hljs-literal">true</span>,<br>    queueNumber, progressDialog = <span class="hljs-title class_">ShowAlertDialog</span>(<span class="hljs-string">&#x27;探索中&#x27;</span>, $J(<span class="hljs-string">&#x27;&lt;div/&gt;&#x27;</span>).<span class="hljs-title function_">append</span>($J(<span class="hljs-string">&#x27;&lt;div/&gt;&#x27;</span>, &#123;<br>        <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;waiting_dialog_throbber&#x27;</span><br>    &#125;)).<span class="hljs-title function_">append</span>($J(<span class="hljs-string">&#x27;&lt;div/&gt;&#x27;</span>, &#123;<br>        <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;progressContainer&#x27;</span><br>    &#125;).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;获取进度...&#x27;</span>)), <span class="hljs-string">&#x27;停止&#x27;</span>).<span class="hljs-title function_">done</span>(abort);<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">abort</span>(<span class="hljs-params"></span>) &#123;<br>        running = <span class="hljs-literal">false</span>;<br>        progressDialog.<span class="hljs-title class_">Dismiss</span>();<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">retry</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">abort</span>();<br>        <span class="hljs-title class_">ShowConfirmDialog</span>(<span class="hljs-string">&#x27;错误&#x27;</span>, <span class="hljs-string">&#x27;是否重试?&#x27;</span>, <span class="hljs-string">&#x27;重试&#x27;</span>, <span class="hljs-string">&#x27;放弃&#x27;</span>).<span class="hljs-title function_">done</span>(_exec)<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">clearApp</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (!running) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-title function_">showProgress</span>();<br>        <span class="hljs-keyword">var</span> appid = appids.<span class="hljs-title function_">shift</span>(); ! appid ? <span class="hljs-title function_">generateQueue</span>() : $J.<span class="hljs-title function_">post</span>(appids.<span class="hljs-property">length</span> ? <span class="hljs-string">&#x27;/app/&#x27;</span> + <span class="hljs-attr">appid</span>: <span class="hljs-string">&#x27;/explore/next/&#x27;</span>, &#123;<br>            <span class="hljs-attr">sessionid</span>: g_sessionID,<br>            <span class="hljs-attr">appid_to_clear_from_queue</span>: appid<br>        &#125;).<span class="hljs-title function_">done</span>(clearApp).<span class="hljs-title function_">fail</span>(retry);<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateQueue</span>(<span class="hljs-params"></span>) &#123;<br>        running &amp;&amp; $J.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/explore/generatenewdiscoveryqueue&#x27;</span>, &#123;<br>            <span class="hljs-attr">sessionid</span>: g_sessionID,<br>            <span class="hljs-attr">queuetype</span>: <span class="hljs-number">0</span><br>        &#125;).<span class="hljs-title function_">done</span>(beginQueue).<span class="hljs-title function_">fail</span>(retry);<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">beginQueue</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (!running) <span class="hljs-keyword">return</span>;<br>        $J.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/explore/&#x27;</span>).<span class="hljs-title function_">done</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">htmlText</span>) &#123;<br>            <span class="hljs-keyword">var</span> cardInfo = htmlText.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/&lt;div class=&quot;subtext&quot;&gt;\D+(\d)\D+&lt;\/div&gt;/</span>);<br>            <span class="hljs-keyword">if</span> (!cardInfo) &#123;<br>                <span class="hljs-title function_">abort</span>();<br>                <span class="hljs-title class_">ShowAlertDialog</span>(<span class="hljs-string">&#x27;完成&#x27;</span>, <span class="hljs-string">&#x27;已完成全部3轮探索队列&#x27;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">var</span> matchedAppids = htmlText.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/0,\s+(\[.*\])/</span>);<br>            <span class="hljs-keyword">if</span> (!matchedAppids) &#123;<br>                <span class="hljs-title function_">retry</span>();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            appids = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(matchedAppids[<span class="hljs-number">1</span>]);<br>            queueNumber = cardInfo[<span class="hljs-number">1</span>];<br>            appids.<span class="hljs-property">length</span> == <span class="hljs-number">0</span> ? <span class="hljs-title function_">generateQueue</span>() : <span class="hljs-title function_">clearApp</span>();<br>            <span class="hljs-title function_">showProgress</span>();<br>        &#125;)<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">showProgress</span>(<span class="hljs-params"></span>) &#123;<br>        $J(<span class="hljs-string">&#x27;#progressContainer&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&lt;br&gt;剩余&#x27;</span> + queueNumber + <span class="hljs-string">&#x27;个待探索队列, 当前队列剩余&#x27;</span> + appids.<span class="hljs-property">length</span> + <span class="hljs-string">&#x27;个待探索游戏&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_">beginQueue</span>();<br>&#125; ())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>代码美化的两种方法</title>
    <link href="/2021/01/11/2021-01-11-code-beautify/"/>
    <url>/2021/01/11/2021-01-11-code-beautify/</url>
    
    <content type="html"><![CDATA[<p>一、使用 <code>carbon</code> 生成图片：</p><p>网址：<a href="https://carbon.now.sh/">https://carbon.now.sh</a></p><p>你可以自行调整代码显示效果，或者直接 <code>Import</code> 我的配置文件，在设置里找一下 <code>Import config</code> 选项即可。</p><p>效果图如下：</p><p><img src="/img/2021-01-11-code-beautify/1.png"></p><p>配置文件内容如下，文件名为 <code>carbon-config.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;paddingVertical&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0px&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;paddingHorizontal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0px&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;backgroundImage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;backgroundImageSelection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;backgroundMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rgba(255,255,255,1)&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;dropShadow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;dropShadowOffsetY&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0px&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;dropShadowBlurRadius&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0px&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;theme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vscode&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;windowTheme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sharp&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;language&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;fontFamily&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JetBrains Mono&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;fontSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;16px&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;lineHeight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;125%&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;windowControls&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;widthAdjustment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;lineNumbers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;firstLineNumber&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;exportSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4x&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;watermark&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;squaredImage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;hiddenCharacters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>二、使用 <code>VS Code</code> 生成格式化代码：</p><p>在 VS Code 中打开你的代码文件，然后安装对应编程语言的插件，插件生效后，复制你的代码，粘贴到 Word 中，粘贴选项选择 <code>保留源格式</code> 即可。</p><p>因为 VS Code 和 Word 都是微软公司的，所以 VS Code 中的代码复制到 Word 后，会自动进行排版，无需自行调整。</p><p>效果图如下：</p><p><img src="/img/2021-01-11-code-beautify/2.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FFmpeg 把 FLV 转为 MP4</title>
    <link href="/2021/01/10/2021-01-10-ffmpeg-convert/"/>
    <url>/2021/01/10/2021-01-10-ffmpeg-convert/</url>
    
    <content type="html"><![CDATA[<p>FFmpeg 下载地址：<a href="https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full.7z">https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full.7z</a></p><p>下载完后，解压到一个合适的位置，把 <code>\ffmpeg-4.2.3-win64-static\bin</code> 文件夹加入环境变量中的系统变量 <code>Path</code>。这步的意义是为了可以在命令行中使用 ffmpeg 命令。</p><p>打开命令行，进入 FLV 文件所在的文件夹，输入 <code>ffmpeg -i input.flv -c copy output.mp4</code> 即可。</p><p>其中，<code>-i</code> 是一个固定的参数，<code>-c</code> 指的是选择一个编码器，<code>copy</code> 指的是复制所有流，<code>-c copy</code> 指的是选择复制所有流这个编码器，即编码方面不做任何改动，只是改变视频的格式而已。</p><p>那为什么要选择 <code>copy</code> 呢？因为如果选择其它编码器的话，ffmpeg 会重新对视频进行编码，导致视频转换格式的过程很慢。如果是直接复制所有流，转换格式的过程就会很快，因为编码方面不需要做任何改动。</p><p>批量转换：</p><p><code>for %%i in (*.ts) do ffmpeg -i &quot;%%i&quot; -c copy &quot;%%~ni.mp4&quot;</code></p><p>把上述代码保存到 <code>1.bat</code> 中，在命令行输入 <code>.\1.bat</code> 即可。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PyInstaller 把 py 打包为 exe</title>
    <link href="/2021/01/09/2021-01-09-pyinstaller/"/>
    <url>/2021/01/09/2021-01-09-pyinstaller/</url>
    
    <content type="html"><![CDATA[<p>PyInstaller 安装：命令行输入 <code>pip install pyinstaller</code></p><p>再新开一个命令行进入 py 文件夹，输入 <code>pyinstaller -F -w xxx.py</code> 即可。</p><p>其中，<code>-F</code> 的作用是只生成一个单独的 exe ，<code>-w</code> 的作用是生成的 exe 在运行过程中不显示命令行窗口。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Excel 把 Unix 时间戳转为北京时间</title>
    <link href="/2021/01/07/2021-01-07-excel-time/"/>
    <url>/2021/01/07/2021-01-07-excel-time/</url>
    
    <content type="html"><![CDATA[<p>对 <code>北京时间</code> 这一列 <code>设置单元格格式</code> ，选择你想要的 <code>日期</code> 格式。</p><p><img src="/img/2021-01-07-excel-time/1.png"></p><p>输入公式 <code>=(A2+8*3600)/86400+70*365+19</code> 即可。</p><p><img src="/img/2021-01-07-excel-time/2.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 显示程序运行时间</title>
    <link href="/2021/01/06/2021-01-06-python-time/"/>
    <url>/2021/01/06/2021-01-06-python-time/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>start = time.perf_counter()<br><span class="hljs-comment"># 放入程序运行代码</span><br>end = time.perf_counter()<br><span class="hljs-built_in">print</span>((end - start), <span class="hljs-string">&quot;s&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>conda 换为清华源</title>
    <link href="/2021/01/05/2021-01-05-conda-source/"/>
    <url>/2021/01/05/2021-01-05-conda-source/</url>
    
    <content type="html"><![CDATA[<p>各类系统都可以通过修改用户目录下的 <code>.condarc</code> 文件实现换源。Windows 无法直接创建名为 <code>.condarc</code> 的文件，可先在命令行执行 <code>conda config --set show_channel_urls yes</code>，生成该文件后再进行修改。</p><p><code>.condarc</code> 文件修改内容如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs text">channels:<br>  - defaults<br>show_channel_urls: true<br>channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda<br>default_channels:<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2<br>custom_channels:<br>  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br></code></pre></td></tr></table></figure><p>运行 <code>conda clean -i</code> 清除索引缓存，保证使用的是镜像站提供的索引。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pip 换为清华源</title>
    <link href="/2021/01/04/2021-01-04-pip-source/"/>
    <url>/2021/01/04/2021-01-04-pip-source/</url>
    
    <content type="html"><![CDATA[<p>在文件夹 <code>C:\Users\你的用户名\pip\</code> 下创建 <code>pip.ini</code>，若没有 <code>pip</code> 文件夹则要自行创建。</p><p>编辑 <code>pip.ini</code> 内容如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">[global]<br>index-url=https://pypi.tuna.tsinghua.edu.cn/simple/ <br>[install]<br>trusted-host=pypi.tuna.tsinghua.edu.cn<br>disable-pip-version-check=true  <br>timeout = 6000<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>删除网络连接中多余的连接</title>
    <link href="/2021/01/03/2021-01-03-delete-network/"/>
    <url>/2021/01/03/2021-01-03-delete-network/</url>
    
    <content type="html"><![CDATA[<p>右键电脑右下角网络图标，<code>打开“网络和 Internet”设置</code>，<code>更改适配器选项</code>，复制多余的连接的名字。</p><p><code>Win+R</code> 输入 <code>regedit</code>，进入注册表。<code>Ctrl+F</code> 搜索刚才复制的名字，把搜索到的项删掉。不断重复搜索和删除的过程，直到搜不到为止。</p><p>回到 <code>网络连接</code> 页面，刷新一下即可发现多余的连接已被删除。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows Server 开启任务管理器中的磁盘监控和网络监控</title>
    <link href="/2021/01/02/2021-01-02-windows-server/"/>
    <url>/2021/01/02/2021-01-02-windows-server/</url>
    
    <content type="html"><![CDATA[<p>在命令行输入 <code>diskperf -y</code> 即可开启，输入 <code>diskperf -n</code> 即可关闭。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>安装 apk 和 obb 文件</title>
    <link href="/2021/01/01/2021-01-01-apk-obb/"/>
    <url>/2021/01/01/2021-01-01-apk-obb/</url>
    
    <content type="html"><![CDATA[<p>以下面两个文件为例：</p><p><code>CrossChannel-1.12-release.apk</code></p><p><code>main.112.com.qqh.crosschannel.obb</code></p><p>先安装 apk，再把 obb 放到 <code>/Android/obb/com.qqh.crosschannel/</code> 文件夹下即可。</p><p>其中，<code>/Android/obb/</code> 文件夹位于手机根目录下，后面的 <code>com.qqh.crosschannel</code> 文件夹需要自行创建，起名依据为 obb 文件名中 com 及后面的内容。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【置顶】暂时用不上的网站</title>
    <link href="/2020/12/31/2020-12-31-software-bundle/"/>
    <url>/2020/12/31/2020-12-31-software-bundle/</url>
    
    <content type="html"><![CDATA[<h2 id="B站录播姬"><a href="#B站录播姬" class="headerlink" title="B站录播姬"></a>B站录播姬</h2><p><a href="https://rec.danmuji.org/">https://rec.danmuji.org</a></p><h2 id="百度网盘会员"><a href="#百度网盘会员" class="headerlink" title="百度网盘会员"></a>百度网盘会员</h2><p><a href="https://github.com/lpg-it/BaiduYunVIP/blob/master/baiduYunVIP.md">https://github.com/lpg-it/BaiduYunVIP/blob/master/baiduYunVIP.md</a></p><h2 id="Diffinity"><a href="#Diffinity" class="headerlink" title="Diffinity"></a>Diffinity</h2><p><a href="https://truehumandesign.se/s_diffinity.php">https://truehumandesign.se/s_diffinity.php</a></p><h2 id="分流抢票"><a href="#分流抢票" class="headerlink" title="分流抢票"></a>分流抢票</h2><p><a href="https://www.bypass.cn/">https://www.bypass.cn</a></p><h2 id="会声会影"><a href="#会声会影" class="headerlink" title="会声会影"></a>会声会影</h2><p><a href="https://ldqk.org/">https://ldqk.org</a></p><h2 id="秘塔写作猫"><a href="#秘塔写作猫" class="headerlink" title="秘塔写作猫"></a>秘塔写作猫</h2><p><a href="https://xiezuocat.com/">https://xiezuocat.com</a></p><h2 id="NewFileTime"><a href="#NewFileTime" class="headerlink" title="NewFileTime"></a>NewFileTime</h2><p><a href="https://www.softwareok.com/?Download=NewFileTime">https://www.softwareok.com/?Download=NewFileTime</a></p><h2 id="PandaOCR"><a href="#PandaOCR" class="headerlink" title="PandaOCR"></a>PandaOCR</h2><p><a href="https://github.com/miaomiaosoft/PandaOCR">https://github.com/miaomiaosoft/PandaOCR</a></p><h2 id="Signtool-GUI-Ver1-0-【数字签名制作及签名工具】"><a href="#Signtool-GUI-Ver1-0-【数字签名制作及签名工具】" class="headerlink" title="Signtool-GUI Ver1.0 【数字签名制作及签名工具】"></a>Signtool-GUI Ver1.0 【数字签名制作及签名工具】</h2><p><a href="https://www.52pojie.cn/thread-1390985-1-1.html">https://www.52pojie.cn/thread-1390985-1-1.html</a></p><h2 id="Steam云激活"><a href="#Steam云激活" class="headerlink" title="Steam云激活"></a>Steam云激活</h2><p><a href="https://stkey.win/">https://stkey.win</a></p><h2 id="图像标注"><a href="#图像标注" class="headerlink" title="图像标注"></a>图像标注</h2><p><a href="https://github.com/wkentaro/labelme">https://github.com/wkentaro/labelme</a></p><p><a href="https://github.com/tzutalin/labelImg">https://github.com/tzutalin/labelImg</a></p><h2 id="Wampserver（Windows-下的-Apache-Mysql-x2F-MariaDB-Perl-x2F-PHP-x2F-Python）"><a href="#Wampserver（Windows-下的-Apache-Mysql-x2F-MariaDB-Perl-x2F-PHP-x2F-Python）" class="headerlink" title="Wampserver（Windows 下的 Apache + Mysql &#x2F; MariaDB + Perl &#x2F; PHP &#x2F; Python）"></a>Wampserver（Windows 下的 Apache + Mysql &#x2F; MariaDB + Perl &#x2F; PHP &#x2F; Python）</h2><p><a href="http://wampserver.aviatechno.net/">http://wampserver.aviatechno.net</a></p><h2 id="维权骑士"><a href="#维权骑士" class="headerlink" title="维权骑士"></a>维权骑士</h2><p><a href="https://rightknights.com/">https://rightknights.com/</a></p><h2 id="微信公众号排版编辑器"><a href="#微信公众号排版编辑器" class="headerlink" title="微信公众号排版编辑器"></a>微信公众号排版编辑器</h2><p><a href="https://github.com/lyricat/wechat-format">https://github.com/lyricat/wechat-format</a></p><h2 id="XSHELL-6-家庭-x2F-学习免费版"><a href="#XSHELL-6-家庭-x2F-学习免费版" class="headerlink" title="XSHELL 6 家庭 &#x2F; 学习免费版"></a>XSHELL 6 家庭 &#x2F; 学习免费版</h2><p><a href="https://www.netsarang.com/zh/free-for-home-school">https://www.netsarang.com/zh/free-for-home-school</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
